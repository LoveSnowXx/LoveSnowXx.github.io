{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/1.jpg","path":"images/1.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-casper/source/css/allinone.min.css","path":"css/allinone.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/css/highlight.css","path":"css/highlight.css","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/css/markdown.css","path":"css/markdown.css","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/css/lightgallery.min.css","path":"css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/css/screen.css","path":"css/screen.css","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/fonts/lg.eot","path":"fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/fonts/lg.svg","path":"fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/fonts/lg.ttf","path":"fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/fonts/lg.woff","path":"fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/img/video-play.png","path":"img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/img/vimeo-play.png","path":"img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/img/youtube-play.png","path":"img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/lightgallery.min.js","path":"js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/post.js","path":"js/post.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/post.min.js","path":"js/post.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/sw-test.js","path":"js/sw-test.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/mix/home-lazy-local.js","path":"js/mix/home-lazy-local.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/mix/home-lazy-local.min.js","path":"js/mix/home-lazy-local.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/mix/post-lazy-local.js","path":"js/mix/post-lazy-local.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/mix/post-lazy-local.min.js","path":"js/mix/post-lazy-local.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/mix/post-lazy.js","path":"js/mix/post-lazy.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/mix/post-lazy.min.js","path":"js/mix/post-lazy.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/mix/post-local.min.js","path":"js/mix/post-local.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-casper/source/js/mix/post-local.js","path":"js/mix/post-local.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Clean Code.md","hash":"b7cc86818ae589255b0fb8a9d59aa2b72b9111ba","modified":1562321234189},{"_id":"source/_posts/TS手册指南.md","hash":"fad5ea424b194967179166f0f85beb48b9bc7ab1","modified":1562309414597},{"_id":"source/_posts/V16-3-React.md","hash":"eb114eef38228c2abc3254fe5a9a2eedd1b96e3b","modified":1555242230819},{"_id":"source/_posts/hello-world.md","hash":"27d4b8d97667920308b2149a7f511bdc3e5f9dfa","modified":1555034399356},{"_id":"source/_posts/“蜜芽内容小程序”.md","hash":"262b353ef4c39919b584a9088484f93e6dcc2656","modified":1565770118136},{"_id":"source/_posts/github-project-list.md","hash":"233ede2ea26c78a96b49acccf8777c5f88034174","modified":1562321232523},{"_id":"source/_posts/“关于小前端团队的思考”.md","hash":"4930d1864a79fc09a8a64101c557f7b6af5d2c5a","modified":1562309366404},{"_id":"source/_posts/node学习教程.md","hash":"fec9fe1ff59dc46b2a023ba84ef9731eebc169d6","modified":1562309370835},{"_id":"source/_posts/中介者模式.md","hash":"70ee4e840a2d0c463d93047601ccf3973e1e2c30","modified":1555242228680},{"_id":"source/_posts/享元模式.md","hash":"7e873c6cf9874491f50fd64d72ebde06605e38d7","modified":1555241494741},{"_id":"source/_posts/实用编码技巧.md","hash":"3a592dcb914f3ecb6502b215b2a531bb70ee7fd8","modified":1562309422460},{"_id":"source/_posts/开发环境优化之旅.md","hash":"01a37a4e4d91dd085abc020fabaee2b24ec6a1ae","modified":1565770331227},{"_id":"source/_posts/未来的生活怎么改变.md","hash":"c2b10bb0e1f151f86fa8a0c97ff0d310b99d5c4e","modified":1565770115106},{"_id":"source/_posts/微信小程序生成海报.md","hash":"9b305365de839674b0ef9916b31f3c1c79f4507d","modified":1561098870143},{"_id":"source/_posts/低风险创业.md","hash":"67a71669184cfd927e10932dce380cdc373ac6b4","modified":1561098013540},{"_id":"source/_posts/相信时间的力量.md","hash":"f4f63e5e9e4f58b08997f0d41ca8683e96e0f061","modified":1555241510564},{"_id":"source/_posts/职责链模式.md","hash":"9f775f7089415b314061809f21408d178af0030f","modified":1555296744936},{"_id":"source/_posts/西安落户.md","hash":"0be4e2a1e7d3282b6546fc9ff1f8e9c0f074c545","modified":1555242227153},{"_id":"source/_posts/设计模式.md","hash":"474671716e9551b32bde3ef219729bbe526c487a","modified":1562309207649},{"_id":"source/_posts/设计模式实例.md","hash":"38d0935d6707d8fe461648d06b5d0c270434a628","modified":1562309221902},{"_id":"source/_posts/设计模式实例2.md","hash":"f055f426357777a7fed499c2f7454651096ac858","modified":1562309424098},{"_id":"source/_posts/西安住房公积金问题.md","hash":"6ceac1d4dd51cfc3848891067c3bc709b6ec57b0","modified":1555241523185},{"_id":"source/_posts/蜜芽小程序沉思录.md","hash":"63f9e34b31316e88575821026083144cc6e789bf","modified":1562309256445},{"_id":"themes/hexo-casper/_config.yml","hash":"177ca181597308d1a098551f4b0fc41129a48d88","modified":1554123120893},{"_id":"themes/hexo-casper/README.md","hash":"148e9f382ea6f4629ccb394f2903c2ca27642b84","modified":1554040933223},{"_id":"source/about/index.md","hash":"50e33f925bc64525ff34ca16b3e7486019ad0369","modified":1555242229690},{"_id":"themes/hexo-casper/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1554040897671},{"_id":"themes/hexo-casper/.git/config","hash":"83f20bf28ee865de52622250e5e982bc3c9464eb","modified":1554040933219},{"_id":"themes/hexo-casper/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1554040933216},{"_id":"themes/hexo-casper/.git/packed-refs","hash":"84656919956e45a827cdfa8b799b76a4dc37c1d4","modified":1554040933215},{"_id":"themes/hexo-casper/scripts/index.js","hash":"80f54fc982d875f1e0b52edaa7984c0c7a5ec71e","modified":1554040933235},{"_id":"themes/hexo-casper/layout/_layout.swig","hash":"9823c88e783d9a18284ca4058cc87c1e37d82559","modified":1554040933225},{"_id":"themes/hexo-casper/layout/archive.swig","hash":"7cf2b42bdc60676b2d8426b636448622ab10e48e","modified":1554040933233},{"_id":"themes/hexo-casper/layout/category.swig","hash":"1d34d688741debf67066a598c0b7d6eacdc1805e","modified":1554040933233},{"_id":"themes/hexo-casper/.git/index","hash":"56b4b5db86cbdeda6492958027ce03cb7b42d878","modified":1554044402110},{"_id":"themes/hexo-casper/layout/page.swig","hash":"b99287ffe8565bb3d6e48d66061a6b171b20bc91","modified":1554040933233},{"_id":"themes/hexo-casper/layout/index.swig","hash":"bfee92ccc3f412977fc6382dbca1f18b6e948056","modified":1554040933233},{"_id":"themes/hexo-casper/layout/post.swig","hash":"85b2916c8c4c798435e799ae5d902ff8f5d5ac93","modified":1554040933234},{"_id":"themes/hexo-casper/layout/tag.swig","hash":"1358b7cbf816196d4cc00503e065d4f5cf0404af","modified":1554040933234},{"_id":"themes/hexo-casper/languages/fr.yml","hash":"5628a766e38663f45e288a7fb0ce578941dc4e79","modified":1554040933224},{"_id":"themes/hexo-casper/languages/default.yml","hash":"0727744d43e06abe5780bb0d8ebe428d216cac38","modified":1554040933224},{"_id":"themes/hexo-casper/languages/nl.yml","hash":"865639ff72be884c40bbcc1ea2477d50a3549b12","modified":1554040933224},{"_id":"themes/hexo-casper/languages/no.yml","hash":"637efbc95bc1386d3bb3edfb1a0942524bc6bc8c","modified":1554040933225},{"_id":"themes/hexo-casper/languages/zh-TW.yml","hash":"949fa7fbc005b14e487f43eb85e77875bffcb39b","modified":1554040933225},{"_id":"themes/hexo-casper/languages/zh-CN.yml","hash":"d219b9301ea4375b25675703fa14d1db8ca8bd9e","modified":1554040933225},{"_id":"themes/hexo-casper/languages/ru.yml","hash":"3d7e0d5429f9a88a01a08940f2ea44546b01ce42","modified":1554040933225},{"_id":"source/images/1.jpg","hash":"6510ff1fdeefc09d30369a736d5bab5e7a9ebf04","modified":1555240611140},{"_id":"themes/hexo-casper/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1554040897673},{"_id":"themes/hexo-casper/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1554040897672},{"_id":"themes/hexo-casper/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1554040897673},{"_id":"themes/hexo-casper/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1554040897674},{"_id":"themes/hexo-casper/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1554040897674},{"_id":"themes/hexo-casper/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1554040897672},{"_id":"themes/hexo-casper/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1554040897675},{"_id":"themes/hexo-casper/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1554040897674},{"_id":"themes/hexo-casper/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1554040897672},{"_id":"themes/hexo-casper/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1554040897675},{"_id":"themes/hexo-casper/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1554040897671},{"_id":"themes/hexo-casper/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1554040897673},{"_id":"themes/hexo-casper/layout/_partials/footer.swig","hash":"8a49c94844ea130269eb995ff8f15859780399be","modified":1554040933226},{"_id":"themes/hexo-casper/layout/_partials/head.swig","hash":"51f688b8dd1ece8ba3728fdf469781448339ca74","modified":1554040933226},{"_id":"themes/hexo-casper/layout/_partials/header.swig","hash":"791dce21cd531692c357e71f6c7fb2579063cc28","modified":1554040933226},{"_id":"themes/hexo-casper/layout/_partials/about.swig","hash":"9c919c057f6e47b4945f563d6a6cd288c71a4f7a","modified":1554040933226},{"_id":"themes/hexo-casper/layout/_partials/index.swig","hash":"df379070a30a63395abf99c530bac46952464ebc","modified":1554040933227},{"_id":"themes/hexo-casper/layout/_partials/javascript.swig","hash":"0e01ba0ca400ce2dd22c2d0d251ae096ecc1049c","modified":1554040933227},{"_id":"themes/hexo-casper/layout/_partials/post.swig","hash":"a731e1e1460efc11965a97f880edbb59a5cf7545","modified":1554040933227},{"_id":"themes/hexo-casper/layout/_partials/search.swig","hash":"9cfe07f165d4e57b98f5ef391aa68bee82cac98d","modified":1554040933231},{"_id":"themes/hexo-casper/layout/_partials/page.swig","hash":"047a2a2c64d57648d0d1cf02768f4098fd3c6384","modified":1554040933227},{"_id":"themes/hexo-casper/layout/_partials/widget.swig","hash":"131f2b9540d5f837fe1c7f64ac7005f48ecf14ab","modified":1554040933231},{"_id":"themes/hexo-casper/.git/logs/HEAD","hash":"b2bbee88de745cb7197191772395b5a5d0182678","modified":1554040933217},{"_id":"themes/hexo-casper/source/css/allinone.min.css","hash":"960be7d7a204c1d479db4c89f6e58b8ff5d03f60","modified":1554040933236},{"_id":"themes/hexo-casper/source/css/highlight.css","hash":"f24dc40cd6ecab543623896df89399ae03bd344e","modified":1554040933237},{"_id":"themes/hexo-casper/source/css/markdown.css","hash":"6a21a90bec15f27d0b6110e22f0a05b533ceac5e","modified":1554040933238},{"_id":"themes/hexo-casper/source/css/lightgallery.min.css","hash":"9e76bdad163856774a96b1230a08dc506600a973","modified":1554040933237},{"_id":"themes/hexo-casper/source/css/style.css","hash":"541c2b69aa3188553b1cab7eb47eec83c87e6c8c","modified":1554040933239},{"_id":"themes/hexo-casper/source/css/screen.css","hash":"b649355ef90fb185fcad37ea8fb3d57f3117c88f","modified":1554040933238},{"_id":"themes/hexo-casper/source/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1554040933239},{"_id":"themes/hexo-casper/source/fonts/lg.svg","hash":"50a2216596766a48655e3f87e1d1000ba93bf8a1","modified":1554040933240},{"_id":"themes/hexo-casper/source/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1554040933240},{"_id":"themes/hexo-casper/source/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1554040933240},{"_id":"themes/hexo-casper/source/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1554040933241},{"_id":"themes/hexo-casper/source/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1554040933241},{"_id":"themes/hexo-casper/source/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1554040933241},{"_id":"themes/hexo-casper/source/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1554040933242},{"_id":"themes/hexo-casper/source/js/lazyload.js","hash":"0b31dabace05042ee29f5989b0191e7e4072a88f","modified":1554040933242},{"_id":"themes/hexo-casper/source/js/lightgallery.min.js","hash":"35bac37c2343c1946d1af64254ec1ab98bb2c247","modified":1554040933243},{"_id":"themes/hexo-casper/source/js/local-search.js","hash":"652d22a71637c8e30cfa7356d5a8d5e402829421","modified":1554040933243},{"_id":"themes/hexo-casper/source/js/post.js","hash":"19c7b84fc868688ffa117bdb30c7b28833e35232","modified":1554040933246},{"_id":"themes/hexo-casper/source/js/post.min.js","hash":"4b22673d9f88c7beaccd86485e6e75fe87d4ac1d","modified":1554040933246},{"_id":"themes/hexo-casper/source/js/sw-test.js","hash":"d01a7f14328e73f3578240e2a391c209e275912b","modified":1554040933247},{"_id":"themes/hexo-casper/.git/refs/heads/master","hash":"842a2878a55cb57378a975ce849f6aae582eb667","modified":1554040933217},{"_id":"themes/hexo-casper/.git/objects/pack/pack-cee1b0b0f29355ebf3a2f2fe13c824e7c7c0f03b.idx","hash":"06ed241d9c98f336f94754965acf31280e490a69","modified":1554040933205},{"_id":"themes/hexo-casper/layout/_partials/widget/category.swig","hash":"932a26fca0534b185bff0b02d329db3768b3ba5e","modified":1554040933232},{"_id":"themes/hexo-casper/layout/_partials/widget/recent_posts.swig","hash":"9a08423189bf44d7a19ae6bf6314c5d537453291","modified":1554040933232},{"_id":"themes/hexo-casper/layout/_partials/widget/tagcloud.swig","hash":"8520b6d747b3daf800871be9163b23a784d668b4","modified":1554040933232},{"_id":"themes/hexo-casper/layout/_partials/public/fload-header.swig","hash":"9c7701a70020114672a1c51d1ebced3ddf860789","modified":1554040933227},{"_id":"themes/hexo-casper/layout/_partials/public/nav.swig","hash":"1b3ccfe6836d79ac04913552e0893885eb0600f0","modified":1554040933230},{"_id":"themes/hexo-casper/layout/_partials/public/social.swig","hash":"5c0d27bd616d38f32a8fbfeabf7eb1fe6a4fe8cd","modified":1554040933230},{"_id":"themes/hexo-casper/layout/_partials/public/toc.swig","hash":"30c6c3ca74d7b496e03ec856e8342515f73386d3","modified":1554040933230},{"_id":"themes/hexo-casper/source/js/mix/home-lazy-local.js","hash":"2bc5cc6ccfb5486ad1bbf616071ca141e238411d","modified":1554040933243},{"_id":"themes/hexo-casper/source/js/mix/home-lazy-local.min.js","hash":"caa8f3748286b195621690690f8d0766c3fb7e4b","modified":1554040933244},{"_id":"themes/hexo-casper/source/js/mix/post-lazy-local.js","hash":"f40f01965bcbde9388ef70b072b3822b68a8c00a","modified":1554040933244},{"_id":"themes/hexo-casper/source/js/mix/post-lazy-local.min.js","hash":"840ecd5212bf35f806fb6b7ec66e497f4aa309fb","modified":1554040933244},{"_id":"themes/hexo-casper/source/js/mix/post-lazy.js","hash":"a998a762da6a4f4d91bddd321f40303dc589636c","modified":1554040933245},{"_id":"themes/hexo-casper/source/js/mix/post-lazy.min.js","hash":"de1a54a6f8279b49b83ba3c3a85a1794986bca52","modified":1554040933245},{"_id":"themes/hexo-casper/source/js/mix/post-local.min.js","hash":"24d7ed166c7757cd6b12c3e2621f83d39eb4dd78","modified":1554040933246},{"_id":"themes/hexo-casper/source/js/mix/post-local.js","hash":"8fde069fcd701c517aba18a1f85f631bac0a7774","modified":1554040933245},{"_id":"themes/hexo-casper/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1554040933216},{"_id":"themes/hexo-casper/layout/_partials/public/icons/avatar.svg","hash":"86217ef513f535a9864b59a93aa0bc2f9ab85378","modified":1554040933228},{"_id":"themes/hexo-casper/layout/_partials/public/icons/bilibili.svg","hash":"1c01318c13bf5440e305354992a7558e8ed02b26","modified":1554040933228},{"_id":"themes/hexo-casper/layout/_partials/public/icons/facebook.svg","hash":"c0addca4f00b849929b1ad5fa56663a12c11677a","modified":1554040933228},{"_id":"themes/hexo-casper/layout/_partials/public/icons/github.svg","hash":"21d7913a530ad2a835ba521e0c152f35cbaab4c1","modified":1554040933229},{"_id":"themes/hexo-casper/layout/_partials/public/icons/telegram.svg","hash":"7ffdcca47a2de0c33deee9c6aa6cc77b48bc700b","modified":1554040933229},{"_id":"themes/hexo-casper/layout/_partials/public/icons/twitter.svg","hash":"540aa3b11d93e9677acd16211e8cdc5de817688e","modified":1554040933229},{"_id":"themes/hexo-casper/layout/_partials/public/icons/weibo.svg","hash":"89796272786fd0983f0c956ef39efb52e5956669","modified":1554040933229},{"_id":"themes/hexo-casper/layout/_partials/public/icons/youtube.svg","hash":"d6a5cf004954676b2114a491e498936f9333ef7e","modified":1554040933230},{"_id":"themes/hexo-casper/.git/logs/refs/heads/master","hash":"b2bbee88de745cb7197191772395b5a5d0182678","modified":1554040933218},{"_id":"themes/hexo-casper/.git/logs/refs/remotes/origin/HEAD","hash":"b2bbee88de745cb7197191772395b5a5d0182678","modified":1554040933216},{"_id":"themes/hexo-casper/.git/objects/pack/pack-cee1b0b0f29355ebf3a2f2fe13c824e7c7c0f03b.pack","hash":"119e91ce6b603c4d7228c440d2e17bb19375ebba","modified":1554040933204},{"_id":"public/sw.js","hash":"83914c5dbac72e5ff54c172de7b32acccaf5afc6","modified":1565770921471},{"_id":"public/searchData.json","hash":"525baae69fc74bef5368d31d2e1d05715e552faf","modified":1565770921472},{"_id":"public/searchVersion.txt","hash":"38da30bcb7444b1f644bef4ae28f0b665f510b05","modified":1565770921472},{"_id":"public/about/index.html","hash":"f00a80c7c46658f9d4bda0e798ce58e1d64e20fe","modified":1565770921472},{"_id":"public/2019/07/05/TS手册指南/index.html","hash":"ea81a671392cae83dcbd861e259f0ec241a8e975","modified":1565770921472},{"_id":"public/2019/07/02/设计模式实例2/index.html","hash":"0f0d19729f94407e863b59f53b5edf9fb7e8a2e3","modified":1565770921472},{"_id":"public/2019/07/02/设计模式实例/index.html","hash":"73a5503c1e9d887b623e74af7e2bda96a11e8c48","modified":1565770921472},{"_id":"public/2019/07/04/node学习教程/index.html","hash":"6443a181af1dd61c5fb77d7d376e2634392e26b8","modified":1565770921472},{"_id":"public/2019/07/02/设计模式/index.html","hash":"d1a807fb48b82350755fa8681fe3befd0d310244","modified":1565770921472},{"_id":"public/2019/06/21/微信小程序生成海报/index.html","hash":"4138314cbc3d8091b1010f2068368b712c17fcd8","modified":1565770921473},{"_id":"public/2019/06/21/低风险创业/index.html","hash":"ef23b1100087f3017881370f3777d0bf35a94ff6","modified":1565770921473},{"_id":"public/2019/05/17/蜜芽小程序沉思录/index.html","hash":"7f915c464696cbd8a112c5db7eaeb936c50938ef","modified":1565770921473},{"_id":"public/2019/04/29/github-project-list/index.html","hash":"d72ed410438ba8a8cbd1cbe58a179cb50db26be7","modified":1565770921473},{"_id":"public/2019/04/19/“蜜芽内容小程序”/index.html","hash":"7ebd0988fbe8b2180966cfd76d429b43c38f3c88","modified":1565770921473},{"_id":"public/2019/04/19/“关于小前端团队的思考”/index.html","hash":"6cc0546a7e54c9081ee31a92ef5eb3e67132c44e","modified":1565770921473},{"_id":"public/2019/04/19/实用编码技巧/index.html","hash":"863eac2da77eda7ad90fbd3e40781278798a6032","modified":1565770921474},{"_id":"public/2019/04/14/西安落户/index.html","hash":"3ed2949749bfcfe8971774986e67db9ca1f294fe","modified":1565770921474},{"_id":"public/2019/04/14/中介者模式/index.html","hash":"e5c0ae9042d5806755cf2acc853ae71581cf8dc3","modified":1565770921474},{"_id":"public/2019/04/14/职责链模式/index.html","hash":"ab29a056a189477db4f8272a38e71ae1af47f7a6","modified":1565770921474},{"_id":"public/2019/04/14/享元模式/index.html","hash":"739efbe44d9672da6a2abaa5f3fe93c43034bc5a","modified":1565770921474},{"_id":"public/2019/04/13/相信时间的力量/index.html","hash":"d12fb7395ff644cf88f289491aae18c3859bfbc7","modified":1565770921474},{"_id":"public/2019/04/10/西安住房公积金问题/index.html","hash":"5d29d6132eb065b65933c2152e3a4ed2e0d52701","modified":1565770921475},{"_id":"public/2019/04/01/V16-3-React/index.html","hash":"e7b988e639797e3092a04c66a6089c031478af09","modified":1565770921475},{"_id":"public/2019/03/31/hello-world/index.html","hash":"faccf7582b296910ae68ac61cf7d5ecc79e4189d","modified":1565770921475},{"_id":"public/archives/index.html","hash":"7d2c1fe188b933428ca56bfb30ccacb727e4b7b3","modified":1565770921475},{"_id":"public/archives/page/2/index.html","hash":"3e053006fed813893d212406e4cef73dc8f788c2","modified":1565770921475},{"_id":"public/archives/2019/index.html","hash":"a60289ddbe13c838a5a3339967cd930790b9707c","modified":1565770921475},{"_id":"public/archives/2019/page/2/index.html","hash":"04f950e2ee6fb680553dcdc9b41ab6b8d109d2f7","modified":1565770921475},{"_id":"public/archives/2019/03/index.html","hash":"c038a10a8f62eb6b51c2912c6679e3800bae28e8","modified":1565770921476},{"_id":"public/archives/2019/04/index.html","hash":"4cf766df46433d42b2efd9071799a201636ad311","modified":1565770921476},{"_id":"public/archives/2019/04/page/2/index.html","hash":"dd10e89567ffec0dfc3d7e5025d0ef910c387f08","modified":1565770921476},{"_id":"public/archives/2019/05/index.html","hash":"ba7e7165c9e716053bb5920a75fd345ec54bc9b9","modified":1565770921476},{"_id":"public/archives/2019/06/index.html","hash":"540e60e7a805b0cdfbe86a7f824f479397a3a444","modified":1565770921476},{"_id":"public/archives/2019/07/index.html","hash":"952ea48c25224b83eac806a902427c5bd602a266","modified":1565770921476},{"_id":"public/index.html","hash":"ee1777aa350019111c450f8f8e72b6d0c1d943c0","modified":1565770921476},{"_id":"public/page/2/index.html","hash":"e523eb17975f894437c9631b8b986199eae2e31d","modified":1565770921476},{"_id":"public/tags/前端/index.html","hash":"878f34ccbf6d5c3b34cb24952daf34e217efaf25","modified":1565770921476},{"_id":"public/tags/React/index.html","hash":"f6fb52589eaaad6f83f50447d229e98e18227456","modified":1565770921476},{"_id":"public/tags/设计模式/index.html","hash":"c16a2600eeedd7025c741602f933e23c9299ec47","modified":1565770921476},{"_id":"public/tags/微信小程序/index.html","hash":"b588f25de14a098417bf1d91700d9edc19447684","modified":1565770921476},{"_id":"public/tags/海报/index.html","hash":"9e2bfd950c975137a2eb9b79d3c324b7434a1f68","modified":1565770921476},{"_id":"public/tags/创业/index.html","hash":"72e6065072933456c462f4edebe4826f5ef77cde","modified":1565770921476},{"_id":"public/tags/情绪/index.html","hash":"e6e56073b176eb8d4bb880c04178c8e3614297db","modified":1565770921477},{"_id":"public/tags/时间/index.html","hash":"e4d1d12a386abc7371a42c5e050dfbebb536de2a","modified":1565770921477},{"_id":"public/tags/随笔/index.html","hash":"74ff0ccdeb236e79a29618849d16687d12a18e3e","modified":1565770921477},{"_id":"public/tags/西安落户/index.html","hash":"50bfb80ff2cfd24f5a3394e1aaeb1800c786409b","modified":1565770921477},{"_id":"public/tags/西安买房/index.html","hash":"22b95fd85768a9544daa10e9ee9fbcf5a403ecdc","modified":1565770921477},{"_id":"public/tags/住房公积金/index.html","hash":"592a645fb57cc84a9e98704f777785cea3ab2b29","modified":1565770921477},{"_id":"public/2019/08/14/开发环境优化之旅/index.html","hash":"79ea14ccf80e942a08517564f01bf4be35ea1dbf","modified":1565770921485},{"_id":"public/2019/08/14/未来的生活怎么改变/index.html","hash":"9744b84d04e17adbde720cbc703e1735db143b70","modified":1565770921485},{"_id":"public/archives/page/3/index.html","hash":"08dcc622282ab1b8b4cbd0ffa2f0329d1c2ec768","modified":1565770921485},{"_id":"public/archives/2019/page/3/index.html","hash":"112deb6d9a40b9d2ff7926952e60ae97d8247885","modified":1565770921486},{"_id":"public/archives/2019/08/index.html","hash":"9a8126e04cfc0cb8a512c4faf04f6b016e13e4e4","modified":1565770921486},{"_id":"public/page/3/index.html","hash":"a7e214d0ac881381ed02fc027adf7a569541416f","modified":1565770921486},{"_id":"public/tags/typescript/index.html","hash":"c703a7f56f4ddab1bec8861535cfefb382d43045","modified":1565770921486},{"_id":"public/tags/蜜芽/index.html","hash":"83bd6c2911e1ae0f5b4d0602095cb9928206092f","modified":1565770921486},{"_id":"public/tags/自有品牌荟小程序/index.html","hash":"557a3abbb21307142144ec55de241a414b26df18","modified":1565770921486},{"_id":"public/tags/github资源/index.html","hash":"e323f3d65d80a5052277e674689a6002f68a24ed","modified":1565770921486},{"_id":"public/tags/node/index.html","hash":"e31e91efc146a712fd8bb5a5f1355b74123766fc","modified":1565770921486},{"_id":"public/tags/code/index.html","hash":"0112e03a5f09a06cf45f2ad624e1e447577e08b4","modified":1565770921486},{"_id":"public/tags/开发环境/index.html","hash":"a1ddd4acfd50c66dda99af3083846292eef704a6","modified":1565770921487},{"_id":"public/tags/未来/index.html","hash":"5d7d04d73b800e65d6607a9fca9ef431afe99a17","modified":1565770921487},{"_id":"public/tags/商业/index.html","hash":"520ca8d3b1f68352717fef5fcea2c8f77d4bc085","modified":1565770921487}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2019-04-01T01:51:31.000Z","_content":"### 履历\n- \b蜜芽&nbsp;&nbsp;&nbsp;&nbsp;产品技术中心&nbsp;&nbsp;&nbsp;&nbsp;高级开发工程师&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2018.4\n- 西安水花科技&nbsp;&nbsp;&nbsp;&nbsp;联合创始人&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2018.7-2019.4\n- 京东商城&nbsp;&nbsp;&nbsp;&nbsp;用户体验部&nbsp;&nbsp;&nbsp;&nbsp;软件开发工程师&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2016.7-2018.6\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-04-01 09:51:31\n---\n### 履历\n- \b蜜芽&nbsp;&nbsp;&nbsp;&nbsp;产品技术中心&nbsp;&nbsp;&nbsp;&nbsp;高级开发工程师&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2018.4\n- 西安水花科技&nbsp;&nbsp;&nbsp;&nbsp;联合创始人&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2018.7-2019.4\n- 京东商城&nbsp;&nbsp;&nbsp;&nbsp;用户体验部&nbsp;&nbsp;&nbsp;&nbsp;软件开发工程师&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2016.7-2018.6\n","updated":"2019-04-14T11:43:49.690Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjzaz4d22000qnpmkmga29kit","content":"<h3 id=\"履历\"><a href=\"#履历\" class=\"headerlink\" title=\"履历\"></a>履历</h3><ul>\n<li>\b蜜芽&nbsp;&nbsp;&nbsp;&nbsp;产品技术中心&nbsp;&nbsp;&nbsp;&nbsp;高级开发工程师&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2018.4</li>\n<li>西安水花科技&nbsp;&nbsp;&nbsp;&nbsp;联合创始人&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2018.7-2019.4</li>\n<li>京东商城&nbsp;&nbsp;&nbsp;&nbsp;用户体验部&nbsp;&nbsp;&nbsp;&nbsp;软件开发工程师&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2016.7-2018.6</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"履历\"><a href=\"#履历\" class=\"headerlink\" title=\"履历\"></a>履历</h3><ul>\n<li>\b蜜芽&nbsp;&nbsp;&nbsp;&nbsp;产品技术中心&nbsp;&nbsp;&nbsp;&nbsp;高级开发工程师&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2018.4</li>\n<li>西安水花科技&nbsp;&nbsp;&nbsp;&nbsp;联合创始人&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2018.7-2019.4</li>\n<li>京东商城&nbsp;&nbsp;&nbsp;&nbsp;用户体验部&nbsp;&nbsp;&nbsp;&nbsp;软件开发工程师&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2016.7-2018.6</li>\n</ul>\n"}],"Post":[{"title":"TS手册指南","date":"2019-07-05T03:54:59.000Z","cover_img":null,"feature_img":null,"description":null,"keywords":"TS | typescript","_content":"### 基础类型\n\n#### 布尔值\n```\nlet isNone: boolean = false;\n```\n\n#### 数字\n```\nlet decLiteral: number = 6;\n```\n\n#### 字符串\n```\nlet name: string = `YC`\n```\n\n#### 数组\n```\nlet list: number[] = [1, 2, 3];\n```\n\n#### 元组\n```\nlet x: [string, number];\n// OK\nx = ['hello', 10];\n// Error\nx = [10, 'hello'];\n```\n\n#### 枚举\n```\nenum Color {Red = 1, Green, Blue}\nlet colorName: string = Color[2];\n\nconsole.log(colorName);  // 显示'Green'因为上面代码里它的值是2\n```\n\n#### Any（不清楚变量类型，不希望类型检查器对这些值进行检查）\n```\nlet notSure: any = 4;\nnotSure = \"maybe a string instead\";\nnotSure = false; // okay, definitely a boolean\n```\n\n#### Void(void类型与any类型相反，它表示没有任何类型。)\n```\nfunction warnUser(): void {\n    console.log(\"This is my warning message\");\n}\n声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined和null\n```\n\n#### Null和Undefined\n```\n// Not much else we can assign to these variables!\nlet u: undefined = undefined;\nlet n: null = null;\n```\n\n#### Never\nnever类型表示的是那些永不存在的值的类型。 例如， never类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是 never类型，当它们被永不为真的类型保护所约束时。\n```\n// 返回never的函数必须存在无法达到的终点\nfunction error(message: string): never {\n    throw new Error(message);\n}\n\n// 推断的返回值类型为never\nfunction fail() {\n    return error(\"Something failed\");\n}\n\n// 返回never的函数必须存在无法达到的终点\nfunction infiniteLoop(): never {\n    while (true) {\n    }\n}\n```\n\n#### Object\nobject表示非原始类型，也就是除number，string，boolean，symbol，null或undefined之外的类型。\n```\ndeclare function create(o: object | null): void;\n\ncreate({ prop: 0 }); // OK\ncreate(null); // OK\n```\n\n#### 类型断言\n你比\b机器更清楚自己干什么。\n```\n// “尖括号”语法：\nlet someValue: any = \"this is a string\";\n\nlet strLength: number = (<string>someValue).length;\n\n// as 语法：\nlet someValue: any = \"this is a string\";\n\nlet strLength: number = (someValue as string).length;\n```\n\n### \b接口\n接口可以理解为入参规范\n```\n// 带有问号为可选属性\ninterface SquareConfig {\n  color?: string;\n  width?: number;\n}\n\nfunction createSquare(config: SquareConfig): {color: string; area: number} {\n  let newSquare = {color: \"white\", area: 100};\n  if (config.color) {\n    newSquare.color = config.color;\n  }\n  if (config.width) {\n    newSquare.area = config.width * config.width;\n  }\n  return newSquare;\n}\n\nlet mySquare = createSquare({color: \"black\"});\n```\n\n#### 只读属性\n一些对象属性只能在对象刚刚创建的时候修改其值。\n```\ninterface Point {\n    readonly x: number;\n    readonly y: number;\n}\nlet p1: Point = { x: 10, y: 20 };\np1.x = 5; // error!\n```\n\n#### 函数类型\n定义一个函数的\b入参和返回值\n```\ninterface SearchFunc {\n  (source: string, subString: string): boolean;\n}\nlet mySearch: SearchFunc;\nmySearch = function(source: string, subString: string) {\n  let result = source.search(subString);\n  return result > -1;\n}\n```\n\n#### 定义class类型接口\n```\ninterface ClockInterface {\n    currentTime: Date;\n    setTime(d: Date);\n}\n\nclass Clock implements ClockInterface {\n    currentTime: Date;\n    setTime(d: Date) {\n        this.currentTime = d;\n    }\n    constructor(h: number, m: number) { }\n}\n```\n\n#### 继承接口\n```\ninterface Shape {\n    color: string;\n}\n\ninterface PenStroke {\n    penWidth: number;\n}\n\ninterface Square extends Shape, PenStroke {\n    sideLength: number;\n}\n\nlet square = <Square>{};\nsquare.color = \"blue\";\nsquare.sideLength = 10;\nsquare.penWidth = 5.0;\n```\n","source":"_posts/TS手册指南.md","raw":"---\ntitle: TS手册指南\ndate: 2019-07-05 11:54:59\ntags: [typescript]\ncover_img:\nfeature_img:\ndescription:\nkeywords: TS | typescript\n---\n### 基础类型\n\n#### 布尔值\n```\nlet isNone: boolean = false;\n```\n\n#### 数字\n```\nlet decLiteral: number = 6;\n```\n\n#### 字符串\n```\nlet name: string = `YC`\n```\n\n#### 数组\n```\nlet list: number[] = [1, 2, 3];\n```\n\n#### 元组\n```\nlet x: [string, number];\n// OK\nx = ['hello', 10];\n// Error\nx = [10, 'hello'];\n```\n\n#### 枚举\n```\nenum Color {Red = 1, Green, Blue}\nlet colorName: string = Color[2];\n\nconsole.log(colorName);  // 显示'Green'因为上面代码里它的值是2\n```\n\n#### Any（不清楚变量类型，不希望类型检查器对这些值进行检查）\n```\nlet notSure: any = 4;\nnotSure = \"maybe a string instead\";\nnotSure = false; // okay, definitely a boolean\n```\n\n#### Void(void类型与any类型相反，它表示没有任何类型。)\n```\nfunction warnUser(): void {\n    console.log(\"This is my warning message\");\n}\n声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined和null\n```\n\n#### Null和Undefined\n```\n// Not much else we can assign to these variables!\nlet u: undefined = undefined;\nlet n: null = null;\n```\n\n#### Never\nnever类型表示的是那些永不存在的值的类型。 例如， never类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是 never类型，当它们被永不为真的类型保护所约束时。\n```\n// 返回never的函数必须存在无法达到的终点\nfunction error(message: string): never {\n    throw new Error(message);\n}\n\n// 推断的返回值类型为never\nfunction fail() {\n    return error(\"Something failed\");\n}\n\n// 返回never的函数必须存在无法达到的终点\nfunction infiniteLoop(): never {\n    while (true) {\n    }\n}\n```\n\n#### Object\nobject表示非原始类型，也就是除number，string，boolean，symbol，null或undefined之外的类型。\n```\ndeclare function create(o: object | null): void;\n\ncreate({ prop: 0 }); // OK\ncreate(null); // OK\n```\n\n#### 类型断言\n你比\b机器更清楚自己干什么。\n```\n// “尖括号”语法：\nlet someValue: any = \"this is a string\";\n\nlet strLength: number = (<string>someValue).length;\n\n// as 语法：\nlet someValue: any = \"this is a string\";\n\nlet strLength: number = (someValue as string).length;\n```\n\n### \b接口\n接口可以理解为入参规范\n```\n// 带有问号为可选属性\ninterface SquareConfig {\n  color?: string;\n  width?: number;\n}\n\nfunction createSquare(config: SquareConfig): {color: string; area: number} {\n  let newSquare = {color: \"white\", area: 100};\n  if (config.color) {\n    newSquare.color = config.color;\n  }\n  if (config.width) {\n    newSquare.area = config.width * config.width;\n  }\n  return newSquare;\n}\n\nlet mySquare = createSquare({color: \"black\"});\n```\n\n#### 只读属性\n一些对象属性只能在对象刚刚创建的时候修改其值。\n```\ninterface Point {\n    readonly x: number;\n    readonly y: number;\n}\nlet p1: Point = { x: 10, y: 20 };\np1.x = 5; // error!\n```\n\n#### 函数类型\n定义一个函数的\b入参和返回值\n```\ninterface SearchFunc {\n  (source: string, subString: string): boolean;\n}\nlet mySearch: SearchFunc;\nmySearch = function(source: string, subString: string) {\n  let result = source.search(subString);\n  return result > -1;\n}\n```\n\n#### 定义class类型接口\n```\ninterface ClockInterface {\n    currentTime: Date;\n    setTime(d: Date);\n}\n\nclass Clock implements ClockInterface {\n    currentTime: Date;\n    setTime(d: Date) {\n        this.currentTime = d;\n    }\n    constructor(h: number, m: number) { }\n}\n```\n\n#### 继承接口\n```\ninterface Shape {\n    color: string;\n}\n\ninterface PenStroke {\n    penWidth: number;\n}\n\ninterface Square extends Shape, PenStroke {\n    sideLength: number;\n}\n\nlet square = <Square>{};\nsquare.color = \"blue\";\nsquare.sideLength = 10;\nsquare.penWidth = 5.0;\n```\n","slug":"TS手册指南","published":1,"updated":"2019-07-05T06:50:14.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzaz4d1c0001npmkn76vn5mo","content":"<h3 id=\"基础类型\"><a href=\"#基础类型\" class=\"headerlink\" title=\"基础类型\"></a>基础类型</h3><h4 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let isNone: boolean = false;</span><br></pre></td></tr></table></figure>\n<h4 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let decLiteral: number = 6;</span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let name: string = `YC`</span><br></pre></td></tr></table></figure>\n<h4 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let list: number[] = [1, 2, 3];</span><br></pre></td></tr></table></figure>\n<h4 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let x: [string, number];</span><br><span class=\"line\">// OK</span><br><span class=\"line\">x = [&apos;hello&apos;, 10];</span><br><span class=\"line\">// Error</span><br><span class=\"line\">x = [10, &apos;hello&apos;];</span><br></pre></td></tr></table></figure>\n<h4 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Color &#123;Red = 1, Green, Blue&#125;</span><br><span class=\"line\">let colorName: string = Color[2];</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(colorName);  // 显示&apos;Green&apos;因为上面代码里它的值是2</span><br></pre></td></tr></table></figure>\n<h4 id=\"Any（不清楚变量类型，不希望类型检查器对这些值进行检查）\"><a href=\"#Any（不清楚变量类型，不希望类型检查器对这些值进行检查）\" class=\"headerlink\" title=\"Any（不清楚变量类型，不希望类型检查器对这些值进行检查）\"></a>Any（不清楚变量类型，不希望类型检查器对这些值进行检查）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let notSure: any = 4;</span><br><span class=\"line\">notSure = &quot;maybe a string instead&quot;;</span><br><span class=\"line\">notSure = false; // okay, definitely a boolean</span><br></pre></td></tr></table></figure>\n<h4 id=\"Void-void类型与any类型相反，它表示没有任何类型。\"><a href=\"#Void-void类型与any类型相反，它表示没有任何类型。\" class=\"headerlink\" title=\"Void(void类型与any类型相反，它表示没有任何类型。)\"></a>Void(void类型与any类型相反，它表示没有任何类型。)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function warnUser(): void &#123;</span><br><span class=\"line\">    console.log(&quot;This is my warning message&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined和null</span><br></pre></td></tr></table></figure>\n<h4 id=\"Null和Undefined\"><a href=\"#Null和Undefined\" class=\"headerlink\" title=\"Null和Undefined\"></a>Null和Undefined</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Not much else we can assign to these variables!</span><br><span class=\"line\">let u: undefined = undefined;</span><br><span class=\"line\">let n: null = null;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Never\"><a href=\"#Never\" class=\"headerlink\" title=\"Never\"></a>Never</h4><p>never类型表示的是那些永不存在的值的类型。 例如， never类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是 never类型，当它们被永不为真的类型保护所约束时。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 返回never的函数必须存在无法达到的终点</span><br><span class=\"line\">function error(message: string): never &#123;</span><br><span class=\"line\">    throw new Error(message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 推断的返回值类型为never</span><br><span class=\"line\">function fail() &#123;</span><br><span class=\"line\">    return error(&quot;Something failed&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回never的函数必须存在无法达到的终点</span><br><span class=\"line\">function infiniteLoop(): never &#123;</span><br><span class=\"line\">    while (true) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h4><p>object表示非原始类型，也就是除number，string，boolean，symbol，null或undefined之外的类型。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare function create(o: object | null): void;</span><br><span class=\"line\"></span><br><span class=\"line\">create(&#123; prop: 0 &#125;); // OK</span><br><span class=\"line\">create(null); // OK</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h4><p>你比\b机器更清楚自己干什么。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// “尖括号”语法：</span><br><span class=\"line\">let someValue: any = &quot;this is a string&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">let strLength: number = (&lt;string&gt;someValue).length;</span><br><span class=\"line\"></span><br><span class=\"line\">// as 语法：</span><br><span class=\"line\">let someValue: any = &quot;this is a string&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">let strLength: number = (someValue as string).length;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"\b接口\"></a>\b接口</h3><p>接口可以理解为入参规范<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 带有问号为可选属性</span><br><span class=\"line\">interface SquareConfig &#123;</span><br><span class=\"line\">  color?: string;</span><br><span class=\"line\">  width?: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function createSquare(config: SquareConfig): &#123;color: string; area: number&#125; &#123;</span><br><span class=\"line\">  let newSquare = &#123;color: &quot;white&quot;, area: 100&#125;;</span><br><span class=\"line\">  if (config.color) &#123;</span><br><span class=\"line\">    newSquare.color = config.color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (config.width) &#123;</span><br><span class=\"line\">    newSquare.area = config.width * config.width;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return newSquare;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let mySquare = createSquare(&#123;color: &quot;black&quot;&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"只读属性\"><a href=\"#只读属性\" class=\"headerlink\" title=\"只读属性\"></a>只读属性</h4><p>一些对象属性只能在对象刚刚创建的时候修改其值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Point &#123;</span><br><span class=\"line\">    readonly x: number;</span><br><span class=\"line\">    readonly y: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let p1: Point = &#123; x: 10, y: 20 &#125;;</span><br><span class=\"line\">p1.x = 5; // error!</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h4><p>定义一个函数的\b入参和返回值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface SearchFunc &#123;</span><br><span class=\"line\">  (source: string, subString: string): boolean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let mySearch: SearchFunc;</span><br><span class=\"line\">mySearch = function(source: string, subString: string) &#123;</span><br><span class=\"line\">  let result = source.search(subString);</span><br><span class=\"line\">  return result &gt; -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"定义class类型接口\"><a href=\"#定义class类型接口\" class=\"headerlink\" title=\"定义class类型接口\"></a>定义class类型接口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface ClockInterface &#123;</span><br><span class=\"line\">    currentTime: Date;</span><br><span class=\"line\">    setTime(d: Date);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Clock implements ClockInterface &#123;</span><br><span class=\"line\">    currentTime: Date;</span><br><span class=\"line\">    setTime(d: Date) &#123;</span><br><span class=\"line\">        this.currentTime = d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    constructor(h: number, m: number) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"继承接口\"><a href=\"#继承接口\" class=\"headerlink\" title=\"继承接口\"></a>继承接口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Shape &#123;</span><br><span class=\"line\">    color: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface PenStroke &#123;</span><br><span class=\"line\">    penWidth: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Square extends Shape, PenStroke &#123;</span><br><span class=\"line\">    sideLength: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let square = &lt;Square&gt;&#123;&#125;;</span><br><span class=\"line\">square.color = &quot;blue&quot;;</span><br><span class=\"line\">square.sideLength = 10;</span><br><span class=\"line\">square.penWidth = 5.0;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"基础类型\"><a href=\"#基础类型\" class=\"headerlink\" title=\"基础类型\"></a>基础类型</h3><h4 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let isNone: boolean = false;</span><br></pre></td></tr></table></figure>\n<h4 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let decLiteral: number = 6;</span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let name: string = `YC`</span><br></pre></td></tr></table></figure>\n<h4 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let list: number[] = [1, 2, 3];</span><br></pre></td></tr></table></figure>\n<h4 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let x: [string, number];</span><br><span class=\"line\">// OK</span><br><span class=\"line\">x = [&apos;hello&apos;, 10];</span><br><span class=\"line\">// Error</span><br><span class=\"line\">x = [10, &apos;hello&apos;];</span><br></pre></td></tr></table></figure>\n<h4 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Color &#123;Red = 1, Green, Blue&#125;</span><br><span class=\"line\">let colorName: string = Color[2];</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(colorName);  // 显示&apos;Green&apos;因为上面代码里它的值是2</span><br></pre></td></tr></table></figure>\n<h4 id=\"Any（不清楚变量类型，不希望类型检查器对这些值进行检查）\"><a href=\"#Any（不清楚变量类型，不希望类型检查器对这些值进行检查）\" class=\"headerlink\" title=\"Any（不清楚变量类型，不希望类型检查器对这些值进行检查）\"></a>Any（不清楚变量类型，不希望类型检查器对这些值进行检查）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let notSure: any = 4;</span><br><span class=\"line\">notSure = &quot;maybe a string instead&quot;;</span><br><span class=\"line\">notSure = false; // okay, definitely a boolean</span><br></pre></td></tr></table></figure>\n<h4 id=\"Void-void类型与any类型相反，它表示没有任何类型。\"><a href=\"#Void-void类型与any类型相反，它表示没有任何类型。\" class=\"headerlink\" title=\"Void(void类型与any类型相反，它表示没有任何类型。)\"></a>Void(void类型与any类型相反，它表示没有任何类型。)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function warnUser(): void &#123;</span><br><span class=\"line\">    console.log(&quot;This is my warning message&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined和null</span><br></pre></td></tr></table></figure>\n<h4 id=\"Null和Undefined\"><a href=\"#Null和Undefined\" class=\"headerlink\" title=\"Null和Undefined\"></a>Null和Undefined</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Not much else we can assign to these variables!</span><br><span class=\"line\">let u: undefined = undefined;</span><br><span class=\"line\">let n: null = null;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Never\"><a href=\"#Never\" class=\"headerlink\" title=\"Never\"></a>Never</h4><p>never类型表示的是那些永不存在的值的类型。 例如， never类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是 never类型，当它们被永不为真的类型保护所约束时。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 返回never的函数必须存在无法达到的终点</span><br><span class=\"line\">function error(message: string): never &#123;</span><br><span class=\"line\">    throw new Error(message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 推断的返回值类型为never</span><br><span class=\"line\">function fail() &#123;</span><br><span class=\"line\">    return error(&quot;Something failed&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回never的函数必须存在无法达到的终点</span><br><span class=\"line\">function infiniteLoop(): never &#123;</span><br><span class=\"line\">    while (true) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h4><p>object表示非原始类型，也就是除number，string，boolean，symbol，null或undefined之外的类型。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare function create(o: object | null): void;</span><br><span class=\"line\"></span><br><span class=\"line\">create(&#123; prop: 0 &#125;); // OK</span><br><span class=\"line\">create(null); // OK</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h4><p>你比\b机器更清楚自己干什么。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// “尖括号”语法：</span><br><span class=\"line\">let someValue: any = &quot;this is a string&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">let strLength: number = (&lt;string&gt;someValue).length;</span><br><span class=\"line\"></span><br><span class=\"line\">// as 语法：</span><br><span class=\"line\">let someValue: any = &quot;this is a string&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">let strLength: number = (someValue as string).length;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"\b接口\"></a>\b接口</h3><p>接口可以理解为入参规范<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 带有问号为可选属性</span><br><span class=\"line\">interface SquareConfig &#123;</span><br><span class=\"line\">  color?: string;</span><br><span class=\"line\">  width?: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function createSquare(config: SquareConfig): &#123;color: string; area: number&#125; &#123;</span><br><span class=\"line\">  let newSquare = &#123;color: &quot;white&quot;, area: 100&#125;;</span><br><span class=\"line\">  if (config.color) &#123;</span><br><span class=\"line\">    newSquare.color = config.color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (config.width) &#123;</span><br><span class=\"line\">    newSquare.area = config.width * config.width;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return newSquare;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let mySquare = createSquare(&#123;color: &quot;black&quot;&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"只读属性\"><a href=\"#只读属性\" class=\"headerlink\" title=\"只读属性\"></a>只读属性</h4><p>一些对象属性只能在对象刚刚创建的时候修改其值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Point &#123;</span><br><span class=\"line\">    readonly x: number;</span><br><span class=\"line\">    readonly y: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let p1: Point = &#123; x: 10, y: 20 &#125;;</span><br><span class=\"line\">p1.x = 5; // error!</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h4><p>定义一个函数的\b入参和返回值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface SearchFunc &#123;</span><br><span class=\"line\">  (source: string, subString: string): boolean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let mySearch: SearchFunc;</span><br><span class=\"line\">mySearch = function(source: string, subString: string) &#123;</span><br><span class=\"line\">  let result = source.search(subString);</span><br><span class=\"line\">  return result &gt; -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"定义class类型接口\"><a href=\"#定义class类型接口\" class=\"headerlink\" title=\"定义class类型接口\"></a>定义class类型接口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface ClockInterface &#123;</span><br><span class=\"line\">    currentTime: Date;</span><br><span class=\"line\">    setTime(d: Date);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Clock implements ClockInterface &#123;</span><br><span class=\"line\">    currentTime: Date;</span><br><span class=\"line\">    setTime(d: Date) &#123;</span><br><span class=\"line\">        this.currentTime = d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    constructor(h: number, m: number) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"继承接口\"><a href=\"#继承接口\" class=\"headerlink\" title=\"继承接口\"></a>继承接口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Shape &#123;</span><br><span class=\"line\">    color: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface PenStroke &#123;</span><br><span class=\"line\">    penWidth: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Square extends Shape, PenStroke &#123;</span><br><span class=\"line\">    sideLength: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let square = &lt;Square&gt;&#123;&#125;;</span><br><span class=\"line\">square.color = &quot;blue&quot;;</span><br><span class=\"line\">square.sideLength = 10;</span><br><span class=\"line\">square.penWidth = 5.0;</span><br></pre></td></tr></table></figure>\n"},{"title":"V16.3 React","date":"2019-04-01T01:06:34.000Z","_content":"### React V16.3\n\n#### 新增生命周期函数：\n\n- getDerivedStateFromProps\n- getSnapshotBeforeUpdate\n\ngetDerivedStateFromProps替代componentWillReceiveProps。\n\nAjax请求放在componentDidMount更合适。因为componentWillMount可能会被调用多次。\n\n#### deprecate周期函数\n\n- componentWillReceiveProps\n- componentWillMount\n- componentWillUpdate\n\ngetDerivedStateFromProps取代componentWillReceiveProps是不准确的说法。因为componentWillReceiveProps只在Updating过程中才被调用，而且只在因为父组件引发的Updating过程中才被调用。**getDerivedStateFromProps在Updating和Mounting过程中都会被调用。**\n\n#### 总结\n\n用一个静态函数getDerivedStateFromProps来取代被deprecate的几个生命周期函数，就是强制开发者在render之前只做无副作用的操作，而且能做的操作局限在根据props和state决定新的state，而已。","source":"_posts/V16-3-React.md","raw":"---\ntitle: V16.3 React\ndate: 2019-04-01 09:06:34\ntags: [前端, React]\n---\n### React V16.3\n\n#### 新增生命周期函数：\n\n- getDerivedStateFromProps\n- getSnapshotBeforeUpdate\n\ngetDerivedStateFromProps替代componentWillReceiveProps。\n\nAjax请求放在componentDidMount更合适。因为componentWillMount可能会被调用多次。\n\n#### deprecate周期函数\n\n- componentWillReceiveProps\n- componentWillMount\n- componentWillUpdate\n\ngetDerivedStateFromProps取代componentWillReceiveProps是不准确的说法。因为componentWillReceiveProps只在Updating过程中才被调用，而且只在因为父组件引发的Updating过程中才被调用。**getDerivedStateFromProps在Updating和Mounting过程中都会被调用。**\n\n#### 总结\n\n用一个静态函数getDerivedStateFromProps来取代被deprecate的几个生命周期函数，就是强制开发者在render之前只做无副作用的操作，而且能做的操作局限在根据props和state决定新的state，而已。","slug":"V16-3-React","published":1,"updated":"2019-04-14T11:43:50.819Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzaz4d1f0002npmk9guq260x","content":"<h3 id=\"React-V16-3\"><a href=\"#React-V16-3\" class=\"headerlink\" title=\"React V16.3\"></a>React V16.3</h3><h4 id=\"新增生命周期函数：\"><a href=\"#新增生命周期函数：\" class=\"headerlink\" title=\"新增生命周期函数：\"></a>新增生命周期函数：</h4><ul>\n<li>getDerivedStateFromProps</li>\n<li>getSnapshotBeforeUpdate</li>\n</ul>\n<p>getDerivedStateFromProps替代componentWillReceiveProps。</p>\n<p>Ajax请求放在componentDidMount更合适。因为componentWillMount可能会被调用多次。</p>\n<h4 id=\"deprecate周期函数\"><a href=\"#deprecate周期函数\" class=\"headerlink\" title=\"deprecate周期函数\"></a>deprecate周期函数</h4><ul>\n<li>componentWillReceiveProps</li>\n<li>componentWillMount</li>\n<li>componentWillUpdate</li>\n</ul>\n<p>getDerivedStateFromProps取代componentWillReceiveProps是不准确的说法。因为componentWillReceiveProps只在Updating过程中才被调用，而且只在因为父组件引发的Updating过程中才被调用。<strong>getDerivedStateFromProps在Updating和Mounting过程中都会被调用。</strong></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>用一个静态函数getDerivedStateFromProps来取代被deprecate的几个生命周期函数，就是强制开发者在render之前只做无副作用的操作，而且能做的操作局限在根据props和state决定新的state，而已。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"React-V16-3\"><a href=\"#React-V16-3\" class=\"headerlink\" title=\"React V16.3\"></a>React V16.3</h3><h4 id=\"新增生命周期函数：\"><a href=\"#新增生命周期函数：\" class=\"headerlink\" title=\"新增生命周期函数：\"></a>新增生命周期函数：</h4><ul>\n<li>getDerivedStateFromProps</li>\n<li>getSnapshotBeforeUpdate</li>\n</ul>\n<p>getDerivedStateFromProps替代componentWillReceiveProps。</p>\n<p>Ajax请求放在componentDidMount更合适。因为componentWillMount可能会被调用多次。</p>\n<h4 id=\"deprecate周期函数\"><a href=\"#deprecate周期函数\" class=\"headerlink\" title=\"deprecate周期函数\"></a>deprecate周期函数</h4><ul>\n<li>componentWillReceiveProps</li>\n<li>componentWillMount</li>\n<li>componentWillUpdate</li>\n</ul>\n<p>getDerivedStateFromProps取代componentWillReceiveProps是不准确的说法。因为componentWillReceiveProps只在Updating过程中才被调用，而且只在因为父组件引发的Updating过程中才被调用。<strong>getDerivedStateFromProps在Updating和Mounting过程中都会被调用。</strong></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>用一个静态函数getDerivedStateFromProps来取代被deprecate的几个生命周期函数，就是强制开发者在render之前只做无副作用的操作，而且能做的操作局限在根据props和state决定新的state，而已。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\n### hexo s正常，hexo d不能推远程\n```\n1. hexo clean\n2. hexo g\n3. hexo s\n4. hexo d\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\n### hexo s正常，hexo d不能推远程\n```\n1. hexo clean\n2. hexo g\n3. hexo s\n4. hexo d\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-03-31T15:43:18.772Z","updated":"2019-04-12T01:59:59.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzaz4d1i0004npmk2zf498tn","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<h3 id=\"hexo-s正常，hexo-d不能推远程\"><a href=\"#hexo-s正常，hexo-d不能推远程\" class=\"headerlink\" title=\"hexo s正常，hexo d不能推远程\"></a>hexo s正常，hexo d不能推远程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. hexo clean</span><br><span class=\"line\">2. hexo g</span><br><span class=\"line\">3. hexo s</span><br><span class=\"line\">4. hexo d</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<h3 id=\"hexo-s正常，hexo-d不能推远程\"><a href=\"#hexo-s正常，hexo-d不能推远程\" class=\"headerlink\" title=\"hexo s正常，hexo d不能推远程\"></a>hexo s正常，hexo d不能推远程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. hexo clean</span><br><span class=\"line\">2. hexo g</span><br><span class=\"line\">3. hexo s</span><br><span class=\"line\">4. hexo d</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"蜜芽内容小程序","date":"2019-04-19T08:46:04.000Z","cover_img":null,"feature_img":null,"description":null,"keywords":null,"_content":"### 工时预估\n#### 重构估时\n1. 登录模块 重构0.6\n2. 品牌模块 重构1\n3. 首页模块 重构1\n4. 我的模块 重构0.5\n\n#### 各模块估时\n- 重构总时间 3.1\n- 基本交互总时间 3\n- 数据交互总时间 3\n- 开发总耗时 1\n\n#### \b联调测试\b估时\n联调测试总时间 8.1\n\n#### 项目开发上线总耗时\n预计总花费工时为 20.1\n### 问题整理\n1. 首页搜索是跳转新页面\n2. 点赞样式不可点赞会不会对用户差生困惑\n3. 首页banner：取后台配置banner，点击跳转到配置链接。（这个是所有人都跳到后台配置页面吗？）\n4. 用户昵称过长的截断…（字数多长进行截断）\n5. 首页banner背景虚化\n6. 品牌素材库的图片展示方式\n7. 只有话题详情页可以点赞吗？\n\n### 工程化技术栈选择\n\n### 结构拆分\n1. 登录模块\n  - 弹窗\n  - 倒计时\n  - 电话号码脱敏\n2. 品牌模块\n  - tab切换\n  - 富文本解析\n  - 视频播放\n3. 首页模块\n  - swiper\n  - 搜索\n  - 图片预览\n  - 左右两侧瀑布流\n  - 富文本解析\n4. 我的\n### 组件拆分\n我的-我喜欢的item === 首页-今日精选item\n\n品牌\n- 品牌新闻item\n- 品牌故事item\n- 品牌素材item微信小程序+前端架构微信小程序+前端架构\n\n首页\n- 热门分类item\n- 评论item\n### 复用代码块\n1. 显示省略号\n```\n// 单行省略号\nwhite-space: nowrap;\noverflow: hidden;\ntext-overflow: ellipsis;\n\n// 多行省略号\ndisplay: -webkit-box;\noverflow: hidden;\n-webkit-line-clamp: 2;\n-webkit-box-orient: vertical;\n\n// 多行省略号\n.wrap {\n  height: 40px;\n  line-height: 20px;\n  overflow: hidden;\n}\n.wrap .text {\n  float: right;\n  margin-left: -5px;\n  width: 100%;\n  word-break: break-all;\n}\n.wrap::before {\n  float: left;\n  width: 5px;\n  content: '';\n  height: 40px;\n}\n.wrap::after {\n  float: right;\n  content: \"...\";\n  height: 20px;\n  line-height: 20px;\n  /* 为三个省略号的宽度 */\n  width: 3em;\n  /* 使盒子不占位置 */\n  margin-left: -3em;\n  /* 移动省略号位置 */\n  position: relative;\n  left: 100%;\n  top: -20px;\n  padding-right: 5px;\n}\n```\n2. 流式布局\n```\ncolumn-count: 2;\ncolumn-width: 334rpx;\ncolumn-gap: 23rpx;\n```\n3. 修改页面title\n```\nwx.setNavigationBarTitle({\n  title: '当前页面'\n})\n```\n4. 懒加载\n[微信小程序实现滚动加载更多](https://zhuanlan.zhihu.com/p/32869791)\n5. 图片限宽高度自适应\n```\nmode=\"widthFix\"\n```\n6. 倒计时\n\n#### reference links\n[微信小程序wx.request的简单封装](https://juejin.im/post/5b050e5651882542816aabfa)\n[小程序各种姿势实现登录](https://juejin.im/post/5b6f137ee51d4566252aadb5)\n[微信小程序实现滚动加载更多](https://zhuanlan.zhihu.com/p/32869791)\n[微信小程序Video组件实践总结](https://juejin.im/post/5c4ee15cf265da61193c32f2)\n","source":"_posts/“蜜芽内容小程序”.md","raw":"---\ntitle: 蜜芽内容小程序\ndate: 2019-04-19 16:46:04\ntags: [蜜芽, 自有品牌荟小程序]\ncover_img:\nfeature_img:\ndescription:\nkeywords:\n---\n### 工时预估\n#### 重构估时\n1. 登录模块 重构0.6\n2. 品牌模块 重构1\n3. 首页模块 重构1\n4. 我的模块 重构0.5\n\n#### 各模块估时\n- 重构总时间 3.1\n- 基本交互总时间 3\n- 数据交互总时间 3\n- 开发总耗时 1\n\n#### \b联调测试\b估时\n联调测试总时间 8.1\n\n#### 项目开发上线总耗时\n预计总花费工时为 20.1\n### 问题整理\n1. 首页搜索是跳转新页面\n2. 点赞样式不可点赞会不会对用户差生困惑\n3. 首页banner：取后台配置banner，点击跳转到配置链接。（这个是所有人都跳到后台配置页面吗？）\n4. 用户昵称过长的截断…（字数多长进行截断）\n5. 首页banner背景虚化\n6. 品牌素材库的图片展示方式\n7. 只有话题详情页可以点赞吗？\n\n### 工程化技术栈选择\n\n### 结构拆分\n1. 登录模块\n  - 弹窗\n  - 倒计时\n  - 电话号码脱敏\n2. 品牌模块\n  - tab切换\n  - 富文本解析\n  - 视频播放\n3. 首页模块\n  - swiper\n  - 搜索\n  - 图片预览\n  - 左右两侧瀑布流\n  - 富文本解析\n4. 我的\n### 组件拆分\n我的-我喜欢的item === 首页-今日精选item\n\n品牌\n- 品牌新闻item\n- 品牌故事item\n- 品牌素材item微信小程序+前端架构微信小程序+前端架构\n\n首页\n- 热门分类item\n- 评论item\n### 复用代码块\n1. 显示省略号\n```\n// 单行省略号\nwhite-space: nowrap;\noverflow: hidden;\ntext-overflow: ellipsis;\n\n// 多行省略号\ndisplay: -webkit-box;\noverflow: hidden;\n-webkit-line-clamp: 2;\n-webkit-box-orient: vertical;\n\n// 多行省略号\n.wrap {\n  height: 40px;\n  line-height: 20px;\n  overflow: hidden;\n}\n.wrap .text {\n  float: right;\n  margin-left: -5px;\n  width: 100%;\n  word-break: break-all;\n}\n.wrap::before {\n  float: left;\n  width: 5px;\n  content: '';\n  height: 40px;\n}\n.wrap::after {\n  float: right;\n  content: \"...\";\n  height: 20px;\n  line-height: 20px;\n  /* 为三个省略号的宽度 */\n  width: 3em;\n  /* 使盒子不占位置 */\n  margin-left: -3em;\n  /* 移动省略号位置 */\n  position: relative;\n  left: 100%;\n  top: -20px;\n  padding-right: 5px;\n}\n```\n2. 流式布局\n```\ncolumn-count: 2;\ncolumn-width: 334rpx;\ncolumn-gap: 23rpx;\n```\n3. 修改页面title\n```\nwx.setNavigationBarTitle({\n  title: '当前页面'\n})\n```\n4. 懒加载\n[微信小程序实现滚动加载更多](https://zhuanlan.zhihu.com/p/32869791)\n5. 图片限宽高度自适应\n```\nmode=\"widthFix\"\n```\n6. 倒计时\n\n#### reference links\n[微信小程序wx.request的简单封装](https://juejin.im/post/5b050e5651882542816aabfa)\n[小程序各种姿势实现登录](https://juejin.im/post/5b6f137ee51d4566252aadb5)\n[微信小程序实现滚动加载更多](https://zhuanlan.zhihu.com/p/32869791)\n[微信小程序Video组件实践总结](https://juejin.im/post/5c4ee15cf265da61193c32f2)\n","slug":"“蜜芽内容小程序”","published":1,"updated":"2019-08-14T08:08:38.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzaz4d1j0005npmkzm28u5d8","content":"<h3 id=\"工时预估\"><a href=\"#工时预估\" class=\"headerlink\" title=\"工时预估\"></a>工时预估</h3><h4 id=\"重构估时\"><a href=\"#重构估时\" class=\"headerlink\" title=\"重构估时\"></a>重构估时</h4><ol>\n<li>登录模块 重构0.6</li>\n<li>品牌模块 重构1</li>\n<li>首页模块 重构1</li>\n<li>我的模块 重构0.5</li>\n</ol>\n<h4 id=\"各模块估时\"><a href=\"#各模块估时\" class=\"headerlink\" title=\"各模块估时\"></a>各模块估时</h4><ul>\n<li>重构总时间 3.1</li>\n<li>基本交互总时间 3</li>\n<li>数据交互总时间 3</li>\n<li>开发总耗时 1</li>\n</ul>\n<h4 id=\"联调测试估时\"><a href=\"#联调测试估时\" class=\"headerlink\" title=\"\b联调测试\b估时\"></a>\b联调测试\b估时</h4><p>联调测试总时间 8.1</p>\n<h4 id=\"项目开发上线总耗时\"><a href=\"#项目开发上线总耗时\" class=\"headerlink\" title=\"项目开发上线总耗时\"></a>项目开发上线总耗时</h4><p>预计总花费工时为 20.1</p>\n<h3 id=\"问题整理\"><a href=\"#问题整理\" class=\"headerlink\" title=\"问题整理\"></a>问题整理</h3><ol>\n<li>首页搜索是跳转新页面</li>\n<li>点赞样式不可点赞会不会对用户差生困惑</li>\n<li>首页banner：取后台配置banner，点击跳转到配置链接。（这个是所有人都跳到后台配置页面吗？）</li>\n<li>用户昵称过长的截断…（字数多长进行截断）</li>\n<li>首页banner背景虚化</li>\n<li>品牌素材库的图片展示方式</li>\n<li>只有话题详情页可以点赞吗？</li>\n</ol>\n<h3 id=\"工程化技术栈选择\"><a href=\"#工程化技术栈选择\" class=\"headerlink\" title=\"工程化技术栈选择\"></a>工程化技术栈选择</h3><h3 id=\"结构拆分\"><a href=\"#结构拆分\" class=\"headerlink\" title=\"结构拆分\"></a>结构拆分</h3><ol>\n<li>登录模块<ul>\n<li>弹窗</li>\n<li>倒计时</li>\n<li>电话号码脱敏</li>\n</ul>\n</li>\n<li>品牌模块<ul>\n<li>tab切换</li>\n<li>富文本解析</li>\n<li>视频播放</li>\n</ul>\n</li>\n<li>首页模块<ul>\n<li>swiper</li>\n<li>搜索</li>\n<li>图片预览</li>\n<li>左右两侧瀑布流</li>\n<li>富文本解析</li>\n</ul>\n</li>\n<li>我的<h3 id=\"组件拆分\"><a href=\"#组件拆分\" class=\"headerlink\" title=\"组件拆分\"></a>组件拆分</h3>我的-我喜欢的item === 首页-今日精选item</li>\n</ol>\n<p>品牌</p>\n<ul>\n<li>品牌新闻item</li>\n<li>品牌故事item</li>\n<li>品牌素材item微信小程序+前端架构微信小程序+前端架构</li>\n</ul>\n<p>首页</p>\n<ul>\n<li>热门分类item</li>\n<li>评论item<h3 id=\"复用代码块\"><a href=\"#复用代码块\" class=\"headerlink\" title=\"复用代码块\"></a>复用代码块</h3></li>\n</ul>\n<ol>\n<li><p>显示省略号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 单行省略号</span><br><span class=\"line\">white-space: nowrap;</span><br><span class=\"line\">overflow: hidden;</span><br><span class=\"line\">text-overflow: ellipsis;</span><br><span class=\"line\"></span><br><span class=\"line\">// 多行省略号</span><br><span class=\"line\">display: -webkit-box;</span><br><span class=\"line\">overflow: hidden;</span><br><span class=\"line\">-webkit-line-clamp: 2;</span><br><span class=\"line\">-webkit-box-orient: vertical;</span><br><span class=\"line\"></span><br><span class=\"line\">// 多行省略号</span><br><span class=\"line\">.wrap &#123;</span><br><span class=\"line\">  height: 40px;</span><br><span class=\"line\">  line-height: 20px;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap .text &#123;</span><br><span class=\"line\">  float: right;</span><br><span class=\"line\">  margin-left: -5px;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  word-break: break-all;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap::before &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  width: 5px;</span><br><span class=\"line\">  content: &apos;&apos;;</span><br><span class=\"line\">  height: 40px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap::after &#123;</span><br><span class=\"line\">  float: right;</span><br><span class=\"line\">  content: &quot;...&quot;;</span><br><span class=\"line\">  height: 20px;</span><br><span class=\"line\">  line-height: 20px;</span><br><span class=\"line\">  /* 为三个省略号的宽度 */</span><br><span class=\"line\">  width: 3em;</span><br><span class=\"line\">  /* 使盒子不占位置 */</span><br><span class=\"line\">  margin-left: -3em;</span><br><span class=\"line\">  /* 移动省略号位置 */</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">  left: 100%;</span><br><span class=\"line\">  top: -20px;</span><br><span class=\"line\">  padding-right: 5px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>流式布局</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">column-count: 2;</span><br><span class=\"line\">column-width: 334rpx;</span><br><span class=\"line\">column-gap: 23rpx;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改页面title</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.setNavigationBarTitle(&#123;</span><br><span class=\"line\">  title: &apos;当前页面&apos;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>懒加载<br><a href=\"https://zhuanlan.zhihu.com/p/32869791\" target=\"_blank\" rel=\"noopener\">微信小程序实现滚动加载更多</a></p>\n</li>\n<li><p>图片限宽高度自适应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mode=&quot;widthFix&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>倒计时</p>\n</li>\n</ol>\n<h4 id=\"reference-links\"><a href=\"#reference-links\" class=\"headerlink\" title=\"reference links\"></a>reference links</h4><p><a href=\"https://juejin.im/post/5b050e5651882542816aabfa\" target=\"_blank\" rel=\"noopener\">微信小程序wx.request的简单封装</a><br><a href=\"https://juejin.im/post/5b6f137ee51d4566252aadb5\" target=\"_blank\" rel=\"noopener\">小程序各种姿势实现登录</a><br><a href=\"https://zhuanlan.zhihu.com/p/32869791\" target=\"_blank\" rel=\"noopener\">微信小程序实现滚动加载更多</a><br><a href=\"https://juejin.im/post/5c4ee15cf265da61193c32f2\" target=\"_blank\" rel=\"noopener\">微信小程序Video组件实践总结</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"工时预估\"><a href=\"#工时预估\" class=\"headerlink\" title=\"工时预估\"></a>工时预估</h3><h4 id=\"重构估时\"><a href=\"#重构估时\" class=\"headerlink\" title=\"重构估时\"></a>重构估时</h4><ol>\n<li>登录模块 重构0.6</li>\n<li>品牌模块 重构1</li>\n<li>首页模块 重构1</li>\n<li>我的模块 重构0.5</li>\n</ol>\n<h4 id=\"各模块估时\"><a href=\"#各模块估时\" class=\"headerlink\" title=\"各模块估时\"></a>各模块估时</h4><ul>\n<li>重构总时间 3.1</li>\n<li>基本交互总时间 3</li>\n<li>数据交互总时间 3</li>\n<li>开发总耗时 1</li>\n</ul>\n<h4 id=\"联调测试估时\"><a href=\"#联调测试估时\" class=\"headerlink\" title=\"\b联调测试\b估时\"></a>\b联调测试\b估时</h4><p>联调测试总时间 8.1</p>\n<h4 id=\"项目开发上线总耗时\"><a href=\"#项目开发上线总耗时\" class=\"headerlink\" title=\"项目开发上线总耗时\"></a>项目开发上线总耗时</h4><p>预计总花费工时为 20.1</p>\n<h3 id=\"问题整理\"><a href=\"#问题整理\" class=\"headerlink\" title=\"问题整理\"></a>问题整理</h3><ol>\n<li>首页搜索是跳转新页面</li>\n<li>点赞样式不可点赞会不会对用户差生困惑</li>\n<li>首页banner：取后台配置banner，点击跳转到配置链接。（这个是所有人都跳到后台配置页面吗？）</li>\n<li>用户昵称过长的截断…（字数多长进行截断）</li>\n<li>首页banner背景虚化</li>\n<li>品牌素材库的图片展示方式</li>\n<li>只有话题详情页可以点赞吗？</li>\n</ol>\n<h3 id=\"工程化技术栈选择\"><a href=\"#工程化技术栈选择\" class=\"headerlink\" title=\"工程化技术栈选择\"></a>工程化技术栈选择</h3><h3 id=\"结构拆分\"><a href=\"#结构拆分\" class=\"headerlink\" title=\"结构拆分\"></a>结构拆分</h3><ol>\n<li>登录模块<ul>\n<li>弹窗</li>\n<li>倒计时</li>\n<li>电话号码脱敏</li>\n</ul>\n</li>\n<li>品牌模块<ul>\n<li>tab切换</li>\n<li>富文本解析</li>\n<li>视频播放</li>\n</ul>\n</li>\n<li>首页模块<ul>\n<li>swiper</li>\n<li>搜索</li>\n<li>图片预览</li>\n<li>左右两侧瀑布流</li>\n<li>富文本解析</li>\n</ul>\n</li>\n<li>我的<h3 id=\"组件拆分\"><a href=\"#组件拆分\" class=\"headerlink\" title=\"组件拆分\"></a>组件拆分</h3>我的-我喜欢的item === 首页-今日精选item</li>\n</ol>\n<p>品牌</p>\n<ul>\n<li>品牌新闻item</li>\n<li>品牌故事item</li>\n<li>品牌素材item微信小程序+前端架构微信小程序+前端架构</li>\n</ul>\n<p>首页</p>\n<ul>\n<li>热门分类item</li>\n<li>评论item<h3 id=\"复用代码块\"><a href=\"#复用代码块\" class=\"headerlink\" title=\"复用代码块\"></a>复用代码块</h3></li>\n</ul>\n<ol>\n<li><p>显示省略号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 单行省略号</span><br><span class=\"line\">white-space: nowrap;</span><br><span class=\"line\">overflow: hidden;</span><br><span class=\"line\">text-overflow: ellipsis;</span><br><span class=\"line\"></span><br><span class=\"line\">// 多行省略号</span><br><span class=\"line\">display: -webkit-box;</span><br><span class=\"line\">overflow: hidden;</span><br><span class=\"line\">-webkit-line-clamp: 2;</span><br><span class=\"line\">-webkit-box-orient: vertical;</span><br><span class=\"line\"></span><br><span class=\"line\">// 多行省略号</span><br><span class=\"line\">.wrap &#123;</span><br><span class=\"line\">  height: 40px;</span><br><span class=\"line\">  line-height: 20px;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap .text &#123;</span><br><span class=\"line\">  float: right;</span><br><span class=\"line\">  margin-left: -5px;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  word-break: break-all;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap::before &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  width: 5px;</span><br><span class=\"line\">  content: &apos;&apos;;</span><br><span class=\"line\">  height: 40px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap::after &#123;</span><br><span class=\"line\">  float: right;</span><br><span class=\"line\">  content: &quot;...&quot;;</span><br><span class=\"line\">  height: 20px;</span><br><span class=\"line\">  line-height: 20px;</span><br><span class=\"line\">  /* 为三个省略号的宽度 */</span><br><span class=\"line\">  width: 3em;</span><br><span class=\"line\">  /* 使盒子不占位置 */</span><br><span class=\"line\">  margin-left: -3em;</span><br><span class=\"line\">  /* 移动省略号位置 */</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">  left: 100%;</span><br><span class=\"line\">  top: -20px;</span><br><span class=\"line\">  padding-right: 5px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>流式布局</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">column-count: 2;</span><br><span class=\"line\">column-width: 334rpx;</span><br><span class=\"line\">column-gap: 23rpx;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改页面title</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.setNavigationBarTitle(&#123;</span><br><span class=\"line\">  title: &apos;当前页面&apos;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>懒加载<br><a href=\"https://zhuanlan.zhihu.com/p/32869791\" target=\"_blank\" rel=\"noopener\">微信小程序实现滚动加载更多</a></p>\n</li>\n<li><p>图片限宽高度自适应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mode=&quot;widthFix&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>倒计时</p>\n</li>\n</ol>\n<h4 id=\"reference-links\"><a href=\"#reference-links\" class=\"headerlink\" title=\"reference links\"></a>reference links</h4><p><a href=\"https://juejin.im/post/5b050e5651882542816aabfa\" target=\"_blank\" rel=\"noopener\">微信小程序wx.request的简单封装</a><br><a href=\"https://juejin.im/post/5b6f137ee51d4566252aadb5\" target=\"_blank\" rel=\"noopener\">小程序各种姿势实现登录</a><br><a href=\"https://zhuanlan.zhihu.com/p/32869791\" target=\"_blank\" rel=\"noopener\">微信小程序实现滚动加载更多</a><br><a href=\"https://juejin.im/post/5c4ee15cf265da61193c32f2\" target=\"_blank\" rel=\"noopener\">微信小程序Video组件实践总结</a></p>\n"},{"title":"github project list","date":"2019-04-29T03:00:07.000Z","cover_img":null,"feature_img":null,"description":null,"keywords":null,"_content":"[You-Dont-Need-JavaScript](https://github.com/you-dont-need/You-Dont-Need-JavaScript)\n\n\n[You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS)\n\n[Design-Patterns-in-Javascript/](http://tcorral.github.io/Design-Patterns-in-Javascript/)\n\n[You-Dont-Need-jQuery](https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md)\n\n[JavaScript 30](https://courses.wesbos.com/account/access/59c89fbd7b1edc674255a5e6)\n\n[前端工作面试问题](https://h5bp.org/Front-end-Developer-Interview-Questions/translations/chinese/)\n\n[Node.js 最佳实践](https://github.com/i0natan/nodebestpractices/blob/master/README.chinese.md)\n\n[Python - 100天从新手到大师](https://github.com/jackfrued/Python-100-Days)\n\n[clean-code-javascript](https://github.com/ryanmcdermott/clean-code-javascript)","source":"_posts/github-project-list.md","raw":"---\ntitle: github project list\ndate: 2019-04-29 11:00:07\ntags: [github资源]\ncover_img:\nfeature_img:\ndescription:\nkeywords:\n---\n[You-Dont-Need-JavaScript](https://github.com/you-dont-need/You-Dont-Need-JavaScript)\n\n\n[You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS)\n\n[Design-Patterns-in-Javascript/](http://tcorral.github.io/Design-Patterns-in-Javascript/)\n\n[You-Dont-Need-jQuery](https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md)\n\n[JavaScript 30](https://courses.wesbos.com/account/access/59c89fbd7b1edc674255a5e6)\n\n[前端工作面试问题](https://h5bp.org/Front-end-Developer-Interview-Questions/translations/chinese/)\n\n[Node.js 最佳实践](https://github.com/i0natan/nodebestpractices/blob/master/README.chinese.md)\n\n[Python - 100天从新手到大师](https://github.com/jackfrued/Python-100-Days)\n\n[clean-code-javascript](https://github.com/ryanmcdermott/clean-code-javascript)","slug":"github-project-list","published":1,"updated":"2019-07-05T10:07:12.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzaz4d1k0006npmkmw3af4vi","content":"<p><a href=\"https://github.com/you-dont-need/You-Dont-Need-JavaScript\" target=\"_blank\" rel=\"noopener\">You-Dont-Need-JavaScript</a></p>\n<p><a href=\"https://github.com/getify/You-Dont-Know-JS\" target=\"_blank\" rel=\"noopener\">You-Dont-Know-JS</a></p>\n<p><a href=\"http://tcorral.github.io/Design-Patterns-in-Javascript/\" target=\"_blank\" rel=\"noopener\">Design-Patterns-in-Javascript/</a></p>\n<p><a href=\"https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md\" target=\"_blank\" rel=\"noopener\">You-Dont-Need-jQuery</a></p>\n<p><a href=\"https://courses.wesbos.com/account/access/59c89fbd7b1edc674255a5e6\" target=\"_blank\" rel=\"noopener\">JavaScript 30</a></p>\n<p><a href=\"https://h5bp.org/Front-end-Developer-Interview-Questions/translations/chinese/\" target=\"_blank\" rel=\"noopener\">前端工作面试问题</a></p>\n<p><a href=\"https://github.com/i0natan/nodebestpractices/blob/master/README.chinese.md\" target=\"_blank\" rel=\"noopener\">Node.js 最佳实践</a></p>\n<p><a href=\"https://github.com/jackfrued/Python-100-Days\" target=\"_blank\" rel=\"noopener\">Python - 100天从新手到大师</a></p>\n<p><a href=\"https://github.com/ryanmcdermott/clean-code-javascript\" target=\"_blank\" rel=\"noopener\">clean-code-javascript</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/you-dont-need/You-Dont-Need-JavaScript\" target=\"_blank\" rel=\"noopener\">You-Dont-Need-JavaScript</a></p>\n<p><a href=\"https://github.com/getify/You-Dont-Know-JS\" target=\"_blank\" rel=\"noopener\">You-Dont-Know-JS</a></p>\n<p><a href=\"http://tcorral.github.io/Design-Patterns-in-Javascript/\" target=\"_blank\" rel=\"noopener\">Design-Patterns-in-Javascript/</a></p>\n<p><a href=\"https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md\" target=\"_blank\" rel=\"noopener\">You-Dont-Need-jQuery</a></p>\n<p><a href=\"https://courses.wesbos.com/account/access/59c89fbd7b1edc674255a5e6\" target=\"_blank\" rel=\"noopener\">JavaScript 30</a></p>\n<p><a href=\"https://h5bp.org/Front-end-Developer-Interview-Questions/translations/chinese/\" target=\"_blank\" rel=\"noopener\">前端工作面试问题</a></p>\n<p><a href=\"https://github.com/i0natan/nodebestpractices/blob/master/README.chinese.md\" target=\"_blank\" rel=\"noopener\">Node.js 最佳实践</a></p>\n<p><a href=\"https://github.com/jackfrued/Python-100-Days\" target=\"_blank\" rel=\"noopener\">Python - 100天从新手到大师</a></p>\n<p><a href=\"https://github.com/ryanmcdermott/clean-code-javascript\" target=\"_blank\" rel=\"noopener\">clean-code-javascript</a></p>\n"},{"title":"关于小前端团队的思考","date":"2019-04-19T07:28:38.000Z","cover_img":null,"feature_img":null,"description":null,"keywords":null,"_content":"### 技术如何更好的服务业务\n- 提高效率，缩短开发周期\n  1. 开发环境搭建，\b部署上线流程优化（工程化脚手架）\b,代码发布系统\n  - 搭建cli工具，将开发目录规范化，测试、\n  2. 抽离业务组件，提取公用函数\n  - 对小程序、h5、PC分端进行公用组件拆分、积累。比如mia_wx就用来处理小程序组件。可以直接使用，也可以npm 安装引用。积累组件，确保一个功能不多人实现。规范组件代码，由专门的几个人进行审核组件代码，全员参与提交。\n- 提高可维护性、可扩展性\n  1. 统一的代码风格，CodeReview\n  - 全员每天code指定人的代码，提commit，指出好的或者不足的\n  2. \b处理业务关键人物问题，结对编程\n  - 一个较大需求由两个人完成，每天花半个小时合代码，互相codereview，熟悉业务和代码。\n- 规范的开发流程，精细化作业（项目管理工具）\n  - 预估工期、分为重构、基本交互、数据交互、测试联调\n  - 开发代码前，需画出原型图，由组内成员花20分钟到半小时评审，提出遗漏的逻辑或者怎么实现更好。\n  1. 统一项目管理工具，集成各种解决方案（如埋点等，性能优化，mock平台等）\n\n\n### 如何提高团队成员的技术竞争力\n1. 深入框架实现原理\n2. 设计模式\n3. 算法\n4. 互相学习的长效机制（分享会，每日一文）\n5. \b如何将社区流行的技术适当运用到业务中\n\n### 前后端配合的问题\n1. 后端统一接口规范\n","source":"_posts/“关于小前端团队的思考”.md","raw":"---\ntitle: 关于小前端团队的思考\ndate: 2019-04-19 15:28:38\ntags:\ncover_img:\nfeature_img:\ndescription:\nkeywords:\n---\n### 技术如何更好的服务业务\n- 提高效率，缩短开发周期\n  1. 开发环境搭建，\b部署上线流程优化（工程化脚手架）\b,代码发布系统\n  - 搭建cli工具，将开发目录规范化，测试、\n  2. 抽离业务组件，提取公用函数\n  - 对小程序、h5、PC分端进行公用组件拆分、积累。比如mia_wx就用来处理小程序组件。可以直接使用，也可以npm 安装引用。积累组件，确保一个功能不多人实现。规范组件代码，由专门的几个人进行审核组件代码，全员参与提交。\n- 提高可维护性、可扩展性\n  1. 统一的代码风格，CodeReview\n  - 全员每天code指定人的代码，提commit，指出好的或者不足的\n  2. \b处理业务关键人物问题，结对编程\n  - 一个较大需求由两个人完成，每天花半个小时合代码，互相codereview，熟悉业务和代码。\n- 规范的开发流程，精细化作业（项目管理工具）\n  - 预估工期、分为重构、基本交互、数据交互、测试联调\n  - 开发代码前，需画出原型图，由组内成员花20分钟到半小时评审，提出遗漏的逻辑或者怎么实现更好。\n  1. 统一项目管理工具，集成各种解决方案（如埋点等，性能优化，mock平台等）\n\n\n### 如何提高团队成员的技术竞争力\n1. 深入框架实现原理\n2. 设计模式\n3. 算法\n4. 互相学习的长效机制（分享会，每日一文）\n5. \b如何将社区流行的技术适当运用到业务中\n\n### 前后端配合的问题\n1. 后端统一接口规范\n","slug":"“关于小前端团队的思考”","published":1,"updated":"2019-07-05T06:49:26.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzaz4d1m0009npmk0lc6zhnq","content":"<h3 id=\"技术如何更好的服务业务\"><a href=\"#技术如何更好的服务业务\" class=\"headerlink\" title=\"技术如何更好的服务业务\"></a>技术如何更好的服务业务</h3><ul>\n<li>提高效率，缩短开发周期<ol>\n<li>开发环境搭建，\b部署上线流程优化（工程化脚手架）\b,代码发布系统</li>\n</ol>\n<ul>\n<li>搭建cli工具，将开发目录规范化，测试、</li>\n</ul>\n<ol start=\"2\">\n<li>抽离业务组件，提取公用函数</li>\n</ol>\n<ul>\n<li>对小程序、h5、PC分端进行公用组件拆分、积累。比如mia_wx就用来处理小程序组件。可以直接使用，也可以npm 安装引用。积累组件，确保一个功能不多人实现。规范组件代码，由专门的几个人进行审核组件代码，全员参与提交。</li>\n</ul>\n</li>\n<li>提高可维护性、可扩展性<ol>\n<li>统一的代码风格，CodeReview</li>\n</ol>\n<ul>\n<li>全员每天code指定人的代码，提commit，指出好的或者不足的</li>\n</ul>\n<ol start=\"2\">\n<li>\b处理业务关键人物问题，结对编程</li>\n</ol>\n<ul>\n<li>一个较大需求由两个人完成，每天花半个小时合代码，互相codereview，熟悉业务和代码。</li>\n</ul>\n</li>\n<li>规范的开发流程，精细化作业（项目管理工具）<ul>\n<li>预估工期、分为重构、基本交互、数据交互、测试联调</li>\n<li>开发代码前，需画出原型图，由组内成员花20分钟到半小时评审，提出遗漏的逻辑或者怎么实现更好。</li>\n</ul>\n<ol>\n<li>统一项目管理工具，集成各种解决方案（如埋点等，性能优化，mock平台等）</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"如何提高团队成员的技术竞争力\"><a href=\"#如何提高团队成员的技术竞争力\" class=\"headerlink\" title=\"如何提高团队成员的技术竞争力\"></a>如何提高团队成员的技术竞争力</h3><ol>\n<li>深入框架实现原理</li>\n<li>设计模式</li>\n<li>算法</li>\n<li>互相学习的长效机制（分享会，每日一文）</li>\n<li>\b如何将社区流行的技术适当运用到业务中</li>\n</ol>\n<h3 id=\"前后端配合的问题\"><a href=\"#前后端配合的问题\" class=\"headerlink\" title=\"前后端配合的问题\"></a>前后端配合的问题</h3><ol>\n<li>后端统一接口规范</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"技术如何更好的服务业务\"><a href=\"#技术如何更好的服务业务\" class=\"headerlink\" title=\"技术如何更好的服务业务\"></a>技术如何更好的服务业务</h3><ul>\n<li>提高效率，缩短开发周期<ol>\n<li>开发环境搭建，\b部署上线流程优化（工程化脚手架）\b,代码发布系统</li>\n</ol>\n<ul>\n<li>搭建cli工具，将开发目录规范化，测试、</li>\n</ul>\n<ol start=\"2\">\n<li>抽离业务组件，提取公用函数</li>\n</ol>\n<ul>\n<li>对小程序、h5、PC分端进行公用组件拆分、积累。比如mia_wx就用来处理小程序组件。可以直接使用，也可以npm 安装引用。积累组件，确保一个功能不多人实现。规范组件代码，由专门的几个人进行审核组件代码，全员参与提交。</li>\n</ul>\n</li>\n<li>提高可维护性、可扩展性<ol>\n<li>统一的代码风格，CodeReview</li>\n</ol>\n<ul>\n<li>全员每天code指定人的代码，提commit，指出好的或者不足的</li>\n</ul>\n<ol start=\"2\">\n<li>\b处理业务关键人物问题，结对编程</li>\n</ol>\n<ul>\n<li>一个较大需求由两个人完成，每天花半个小时合代码，互相codereview，熟悉业务和代码。</li>\n</ul>\n</li>\n<li>规范的开发流程，精细化作业（项目管理工具）<ul>\n<li>预估工期、分为重构、基本交互、数据交互、测试联调</li>\n<li>开发代码前，需画出原型图，由组内成员花20分钟到半小时评审，提出遗漏的逻辑或者怎么实现更好。</li>\n</ul>\n<ol>\n<li>统一项目管理工具，集成各种解决方案（如埋点等，性能优化，mock平台等）</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"如何提高团队成员的技术竞争力\"><a href=\"#如何提高团队成员的技术竞争力\" class=\"headerlink\" title=\"如何提高团队成员的技术竞争力\"></a>如何提高团队成员的技术竞争力</h3><ol>\n<li>深入框架实现原理</li>\n<li>设计模式</li>\n<li>算法</li>\n<li>互相学习的长效机制（分享会，每日一文）</li>\n<li>\b如何将社区流行的技术适当运用到业务中</li>\n</ol>\n<h3 id=\"前后端配合的问题\"><a href=\"#前后端配合的问题\" class=\"headerlink\" title=\"前后端配合的问题\"></a>前后端配合的问题</h3><ol>\n<li>后端统一接口规范</li>\n</ol>\n"},{"title":"node学习教程","date":"2019-07-04T09:54:46.000Z","cover_img":null,"feature_img":null,"description":null,"keywords":"Node","_content":"[node-lessons](https://github.com/alsotang/node-lessons)","source":"_posts/node学习教程.md","raw":"---\ntitle: node学习教程\ndate: 2019-07-04 17:54:46\ntags: [node]\ncover_img:\nfeature_img:\ndescription:\nkeywords: Node\n---\n[node-lessons](https://github.com/alsotang/node-lessons)","slug":"node学习教程","published":1,"updated":"2019-07-05T06:49:30.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzaz4d1m000anpmkewox669l","content":"<p><a href=\"https://github.com/alsotang/node-lessons\" target=\"_blank\" rel=\"noopener\">node-lessons</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/alsotang/node-lessons\" target=\"_blank\" rel=\"noopener\">node-lessons</a></p>\n"},{"title":"中介者模式","date":"2019-04-14T10:53:44.000Z","cover_img":null,"feature_img":null,"description":null,"keywords":null,"_content":"中介者模式的作用就是解除对象和对象之间的紧耦合关系。中介者使各对象之间耦合松散，而且可以独立地改变他们之间的交互。中介者模式使网状的多对多关系变成了相对简单的一对多关系。\n\n现实中的例子：\n\n1. 机场指挥塔\n\n      每架飞机不需和所有飞机通信，只需和指挥塔通信。指挥塔知道每架飞机的飞行状况，所以它可以安排所有飞机的起降时间，及时作出航线调整。\n2. 博彩公司\n\n      不可能上千万人一起计算赔率和输赢。有了博彩公司作为中介，每个人只需和博彩公司发生关联，博彩公司会根据所有人的投注情况计算好赔率，彩民们赢了钱就从博彩公司拿，输了钱就交给博彩公司。\n\n\n\n","source":"_posts/中介者模式.md","raw":"---\ntitle: 中介者模式\ndate: 2019-04-14 18:53:44\ntags: [设计模式]\ncover_img:\nfeature_img:\ndescription:\nkeywords:\n---\n中介者模式的作用就是解除对象和对象之间的紧耦合关系。中介者使各对象之间耦合松散，而且可以独立地改变他们之间的交互。中介者模式使网状的多对多关系变成了相对简单的一对多关系。\n\n现实中的例子：\n\n1. 机场指挥塔\n\n      每架飞机不需和所有飞机通信，只需和指挥塔通信。指挥塔知道每架飞机的飞行状况，所以它可以安排所有飞机的起降时间，及时作出航线调整。\n2. 博彩公司\n\n      不可能上千万人一起计算赔率和输赢。有了博彩公司作为中介，每个人只需和博彩公司发生关联，博彩公司会根据所有人的投注情况计算好赔率，彩民们赢了钱就从博彩公司拿，输了钱就交给博彩公司。\n\n\n\n","slug":"中介者模式","published":1,"updated":"2019-04-14T11:43:48.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzaz4d1o000cnpmknbu379rb","content":"<p>中介者模式的作用就是解除对象和对象之间的紧耦合关系。中介者使各对象之间耦合松散，而且可以独立地改变他们之间的交互。中介者模式使网状的多对多关系变成了相对简单的一对多关系。</p>\n<p>现实中的例子：</p>\n<ol>\n<li><p>机场指挥塔</p>\n<p>   每架飞机不需和所有飞机通信，只需和指挥塔通信。指挥塔知道每架飞机的飞行状况，所以它可以安排所有飞机的起降时间，及时作出航线调整。</p>\n</li>\n<li><p>博彩公司</p>\n<p>   不可能上千万人一起计算赔率和输赢。有了博彩公司作为中介，每个人只需和博彩公司发生关联，博彩公司会根据所有人的投注情况计算好赔率，彩民们赢了钱就从博彩公司拿，输了钱就交给博彩公司。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>中介者模式的作用就是解除对象和对象之间的紧耦合关系。中介者使各对象之间耦合松散，而且可以独立地改变他们之间的交互。中介者模式使网状的多对多关系变成了相对简单的一对多关系。</p>\n<p>现实中的例子：</p>\n<ol>\n<li><p>机场指挥塔</p>\n<p>   每架飞机不需和所有飞机通信，只需和指挥塔通信。指挥塔知道每架飞机的飞行状况，所以它可以安排所有飞机的起降时间，及时作出航线调整。</p>\n</li>\n<li><p>博彩公司</p>\n<p>   不可能上千万人一起计算赔率和输赢。有了博彩公司作为中介，每个人只需和博彩公司发生关联，博彩公司会根据所有人的投注情况计算好赔率，彩民们赢了钱就从博彩公司拿，输了钱就交给博彩公司。</p>\n</li>\n</ol>\n"},{"title":"享元模式","date":"2019-04-14T10:35:56.000Z","cover_img":null,"feature_img":null,"description":null,"keywords":null,"_content":"享元模式是为解决性能问题而生的模式。在一个存在大量相似对象的系统中，享元模式可以很好的解决大量对象带来的性能问题。\n\n以下情况发生时可以使用享元模式。\n\n- 一个程序使用了大量的相似对象\n- 由于使用了大量对象，造成很大的内存开销\n- 对象的大多数状态都可以变为外部状态\n- \b剥离出对象的外部状态之后，可以用相对较少的共享对象取代大量对象。","source":"_posts/享元模式.md","raw":"---\ntitle: 享元模式\ndate: 2019-04-14 18:35:56\ntags: [设计模式] \ncover_img:\nfeature_img:\ndescription:\nkeywords:\n---\n享元模式是为解决性能问题而生的模式。在一个存在大量相似对象的系统中，享元模式可以很好的解决大量对象带来的性能问题。\n\n以下情况发生时可以使用享元模式。\n\n- 一个程序使用了大量的相似对象\n- 由于使用了大量对象，造成很大的内存开销\n- 对象的大多数状态都可以变为外部状态\n- \b剥离出对象的外部状态之后，可以用相对较少的共享对象取代大量对象。","slug":"享元模式","published":1,"updated":"2019-04-14T11:31:34.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzaz4d22000pnpmk8cjxatme","content":"<p>享元模式是为解决性能问题而生的模式。在一个存在大量相似对象的系统中，享元模式可以很好的解决大量对象带来的性能问题。</p>\n<p>以下情况发生时可以使用享元模式。</p>\n<ul>\n<li>一个程序使用了大量的相似对象</li>\n<li>由于使用了大量对象，造成很大的内存开销</li>\n<li>对象的大多数状态都可以变为外部状态</li>\n<li>\b剥离出对象的外部状态之后，可以用相对较少的共享对象取代大量对象。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>享元模式是为解决性能问题而生的模式。在一个存在大量相似对象的系统中，享元模式可以很好的解决大量对象带来的性能问题。</p>\n<p>以下情况发生时可以使用享元模式。</p>\n<ul>\n<li>一个程序使用了大量的相似对象</li>\n<li>由于使用了大量对象，造成很大的内存开销</li>\n<li>对象的大多数状态都可以变为外部状态</li>\n<li>\b剥离出对象的外部状态之后，可以用相对较少的共享对象取代大量对象。</li>\n</ul>\n"},{"title":"实用编码技巧","date":"2019-04-19T07:28:16.000Z","cover_img":null,"feature_img":null,"description":null,"keywords":null,"_content":"### 开放-封闭原则\n经常会遇到一种场景，\b自己维护一个接手的老项目。一个简单事例：在window.onload函数中打印出所有节点的数量。\n```\n// 最简单的做法\nwindow.onload = function() {\n    // 原有代码略\n    console.log(document.getElementsByTagName('*').length)\n}\n```\n```\n// 遵从开发-封闭原则，不修改原有代码完成新需求\nFunction.prototype.after=function(afterfn){\n    var __self=this;\n    return function(){\n        var ret=__self.apply(this,arguments);\n        afterfn.apply(this,arguments);\n        return ret;\n    }\n};\nwindow.onload=(window.onload||function(){}).after(function(){\n    console.log(document.getElementsByTagName('*').length);\n});\n```\n\n### 对象的多态性消除条件分支\n```\nvar makeSound=function(animal){\n    if(animal instanceof Duck){\n        console.log('嘎嘎嘎');\n    }else if(animal instanceof Chicken){\n        console.log('咯咯咯');\n    }\n};\n\nvar Duck=function(){};\nvar Chicken=function(){};\nmakeSound(new Duck());//输出：嘎嘎嘎\nmakeSound(new Chicken());//输出：咯咯咯\n```\n当需要增加一个狗的时候，我们常规的做法就是进行增加条件判断。\n```\nvar makeSound=function(animal){\n    if(animal instanceof Duck){\n        console.log('嘎嘎嘎');\n    }else if(animal instanceof Chicken){\n        console.log('咯咯咯');\n    } else if (animal instanceof Dog) {\n        console.log('\b汪汪汪');\n    }\n};\n\nvar Duck=function(){};\nvar Chicken=function(){};\nvar Dog = function() {};\nmakeSound(new Duck());//输出：嘎嘎嘎\nmakeSound(new Chicken());//输出：咯咯咯\nmakeSound(new Dog()); //输出：汪汪汪\n```\n上面的方式也可以实现功能。但是当需求增多的时候，需要修改的部分比较多。利用多态的思想，我们把程序中不变的部分隔离出来（动物都会叫），然后把可变的部分封装起来（不同类型的动物发出不同的叫声），这样一来程序就具有了可扩展性。当我们想让一只狗发出叫声时，只需增加一段代码即可，而不用去改动原有的makeSound函数：\n```\nvar makeSound=function(animal){\n    animal.sound();\n};\nvar Duck=function(){};\nDuck.prototype.sound=function(){\n    console.log('嘎嘎嘎');\n};\nvar Chicken=function(){};\nChicken.prototype.sound=function(){\n    console.log('咯咯咯');\n};\nmakeSound(new Duck());//嘎嘎嘎\nmakeSound(new Chicken());//咯咯咯\n/*********增加动物狗，不用改动原有的makeSound函数****************/\nvar Dog=function(){};\nDog.prototype.sound=function(){\n    console.log('汪汪汪');\n};\nmakeSound(new Dog());//汪汪汪\n```","source":"_posts/实用编码技巧.md","raw":"---\ntitle: 实用编码技巧\ndate: 2019-04-19 15:28:16\ntags: [code]\ncover_img:\nfeature_img:\ndescription:\nkeywords:\n---\n### 开放-封闭原则\n经常会遇到一种场景，\b自己维护一个接手的老项目。一个简单事例：在window.onload函数中打印出所有节点的数量。\n```\n// 最简单的做法\nwindow.onload = function() {\n    // 原有代码略\n    console.log(document.getElementsByTagName('*').length)\n}\n```\n```\n// 遵从开发-封闭原则，不修改原有代码完成新需求\nFunction.prototype.after=function(afterfn){\n    var __self=this;\n    return function(){\n        var ret=__self.apply(this,arguments);\n        afterfn.apply(this,arguments);\n        return ret;\n    }\n};\nwindow.onload=(window.onload||function(){}).after(function(){\n    console.log(document.getElementsByTagName('*').length);\n});\n```\n\n### 对象的多态性消除条件分支\n```\nvar makeSound=function(animal){\n    if(animal instanceof Duck){\n        console.log('嘎嘎嘎');\n    }else if(animal instanceof Chicken){\n        console.log('咯咯咯');\n    }\n};\n\nvar Duck=function(){};\nvar Chicken=function(){};\nmakeSound(new Duck());//输出：嘎嘎嘎\nmakeSound(new Chicken());//输出：咯咯咯\n```\n当需要增加一个狗的时候，我们常规的做法就是进行增加条件判断。\n```\nvar makeSound=function(animal){\n    if(animal instanceof Duck){\n        console.log('嘎嘎嘎');\n    }else if(animal instanceof Chicken){\n        console.log('咯咯咯');\n    } else if (animal instanceof Dog) {\n        console.log('\b汪汪汪');\n    }\n};\n\nvar Duck=function(){};\nvar Chicken=function(){};\nvar Dog = function() {};\nmakeSound(new Duck());//输出：嘎嘎嘎\nmakeSound(new Chicken());//输出：咯咯咯\nmakeSound(new Dog()); //输出：汪汪汪\n```\n上面的方式也可以实现功能。但是当需求增多的时候，需要修改的部分比较多。利用多态的思想，我们把程序中不变的部分隔离出来（动物都会叫），然后把可变的部分封装起来（不同类型的动物发出不同的叫声），这样一来程序就具有了可扩展性。当我们想让一只狗发出叫声时，只需增加一段代码即可，而不用去改动原有的makeSound函数：\n```\nvar makeSound=function(animal){\n    animal.sound();\n};\nvar Duck=function(){};\nDuck.prototype.sound=function(){\n    console.log('嘎嘎嘎');\n};\nvar Chicken=function(){};\nChicken.prototype.sound=function(){\n    console.log('咯咯咯');\n};\nmakeSound(new Duck());//嘎嘎嘎\nmakeSound(new Chicken());//咯咯咯\n/*********增加动物狗，不用改动原有的makeSound函数****************/\nvar Dog=function(){};\nDog.prototype.sound=function(){\n    console.log('汪汪汪');\n};\nmakeSound(new Dog());//汪汪汪\n```","slug":"实用编码技巧","published":1,"updated":"2019-07-05T06:50:22.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzaz4d23000rnpmk7kuen6un","content":"<h3 id=\"开放-封闭原则\"><a href=\"#开放-封闭原则\" class=\"headerlink\" title=\"开放-封闭原则\"></a>开放-封闭原则</h3><p>经常会遇到一种场景，\b自己维护一个接手的老项目。一个简单事例：在window.onload函数中打印出所有节点的数量。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 最简单的做法</span><br><span class=\"line\">window.onload = function() &#123;</span><br><span class=\"line\">    // 原有代码略</span><br><span class=\"line\">    console.log(document.getElementsByTagName(&apos;*&apos;).length)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 遵从开发-封闭原则，不修改原有代码完成新需求</span><br><span class=\"line\">Function.prototype.after=function(afterfn)&#123;</span><br><span class=\"line\">    var __self=this;</span><br><span class=\"line\">    return function()&#123;</span><br><span class=\"line\">        var ret=__self.apply(this,arguments);</span><br><span class=\"line\">        afterfn.apply(this,arguments);</span><br><span class=\"line\">        return ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">window.onload=(window.onload||function()&#123;&#125;).after(function()&#123;</span><br><span class=\"line\">    console.log(document.getElementsByTagName(&apos;*&apos;).length);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象的多态性消除条件分支\"><a href=\"#对象的多态性消除条件分支\" class=\"headerlink\" title=\"对象的多态性消除条件分支\"></a>对象的多态性消除条件分支</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var makeSound=function(animal)&#123;</span><br><span class=\"line\">    if(animal instanceof Duck)&#123;</span><br><span class=\"line\">        console.log(&apos;嘎嘎嘎&apos;);</span><br><span class=\"line\">    &#125;else if(animal instanceof Chicken)&#123;</span><br><span class=\"line\">        console.log(&apos;咯咯咯&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var Duck=function()&#123;&#125;;</span><br><span class=\"line\">var Chicken=function()&#123;&#125;;</span><br><span class=\"line\">makeSound(new Duck());//输出：嘎嘎嘎</span><br><span class=\"line\">makeSound(new Chicken());//输出：咯咯咯</span><br></pre></td></tr></table></figure>\n<p>当需要增加一个狗的时候，我们常规的做法就是进行增加条件判断。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var makeSound=function(animal)&#123;</span><br><span class=\"line\">    if(animal instanceof Duck)&#123;</span><br><span class=\"line\">        console.log(&apos;嘎嘎嘎&apos;);</span><br><span class=\"line\">    &#125;else if(animal instanceof Chicken)&#123;</span><br><span class=\"line\">        console.log(&apos;咯咯咯&apos;);</span><br><span class=\"line\">    &#125; else if (animal instanceof Dog) &#123;</span><br><span class=\"line\">        console.log(&apos;\b汪汪汪&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var Duck=function()&#123;&#125;;</span><br><span class=\"line\">var Chicken=function()&#123;&#125;;</span><br><span class=\"line\">var Dog = function() &#123;&#125;;</span><br><span class=\"line\">makeSound(new Duck());//输出：嘎嘎嘎</span><br><span class=\"line\">makeSound(new Chicken());//输出：咯咯咯</span><br><span class=\"line\">makeSound(new Dog()); //输出：汪汪汪</span><br></pre></td></tr></table></figure></p>\n<p>上面的方式也可以实现功能。但是当需求增多的时候，需要修改的部分比较多。利用多态的思想，我们把程序中不变的部分隔离出来（动物都会叫），然后把可变的部分封装起来（不同类型的动物发出不同的叫声），这样一来程序就具有了可扩展性。当我们想让一只狗发出叫声时，只需增加一段代码即可，而不用去改动原有的makeSound函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var makeSound=function(animal)&#123;</span><br><span class=\"line\">    animal.sound();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var Duck=function()&#123;&#125;;</span><br><span class=\"line\">Duck.prototype.sound=function()&#123;</span><br><span class=\"line\">    console.log(&apos;嘎嘎嘎&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var Chicken=function()&#123;&#125;;</span><br><span class=\"line\">Chicken.prototype.sound=function()&#123;</span><br><span class=\"line\">    console.log(&apos;咯咯咯&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">makeSound(new Duck());//嘎嘎嘎</span><br><span class=\"line\">makeSound(new Chicken());//咯咯咯</span><br><span class=\"line\">/*********增加动物狗，不用改动原有的makeSound函数****************/</span><br><span class=\"line\">var Dog=function()&#123;&#125;;</span><br><span class=\"line\">Dog.prototype.sound=function()&#123;</span><br><span class=\"line\">    console.log(&apos;汪汪汪&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">makeSound(new Dog());//汪汪汪</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"开放-封闭原则\"><a href=\"#开放-封闭原则\" class=\"headerlink\" title=\"开放-封闭原则\"></a>开放-封闭原则</h3><p>经常会遇到一种场景，\b自己维护一个接手的老项目。一个简单事例：在window.onload函数中打印出所有节点的数量。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 最简单的做法</span><br><span class=\"line\">window.onload = function() &#123;</span><br><span class=\"line\">    // 原有代码略</span><br><span class=\"line\">    console.log(document.getElementsByTagName(&apos;*&apos;).length)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 遵从开发-封闭原则，不修改原有代码完成新需求</span><br><span class=\"line\">Function.prototype.after=function(afterfn)&#123;</span><br><span class=\"line\">    var __self=this;</span><br><span class=\"line\">    return function()&#123;</span><br><span class=\"line\">        var ret=__self.apply(this,arguments);</span><br><span class=\"line\">        afterfn.apply(this,arguments);</span><br><span class=\"line\">        return ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">window.onload=(window.onload||function()&#123;&#125;).after(function()&#123;</span><br><span class=\"line\">    console.log(document.getElementsByTagName(&apos;*&apos;).length);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象的多态性消除条件分支\"><a href=\"#对象的多态性消除条件分支\" class=\"headerlink\" title=\"对象的多态性消除条件分支\"></a>对象的多态性消除条件分支</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var makeSound=function(animal)&#123;</span><br><span class=\"line\">    if(animal instanceof Duck)&#123;</span><br><span class=\"line\">        console.log(&apos;嘎嘎嘎&apos;);</span><br><span class=\"line\">    &#125;else if(animal instanceof Chicken)&#123;</span><br><span class=\"line\">        console.log(&apos;咯咯咯&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var Duck=function()&#123;&#125;;</span><br><span class=\"line\">var Chicken=function()&#123;&#125;;</span><br><span class=\"line\">makeSound(new Duck());//输出：嘎嘎嘎</span><br><span class=\"line\">makeSound(new Chicken());//输出：咯咯咯</span><br></pre></td></tr></table></figure>\n<p>当需要增加一个狗的时候，我们常规的做法就是进行增加条件判断。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var makeSound=function(animal)&#123;</span><br><span class=\"line\">    if(animal instanceof Duck)&#123;</span><br><span class=\"line\">        console.log(&apos;嘎嘎嘎&apos;);</span><br><span class=\"line\">    &#125;else if(animal instanceof Chicken)&#123;</span><br><span class=\"line\">        console.log(&apos;咯咯咯&apos;);</span><br><span class=\"line\">    &#125; else if (animal instanceof Dog) &#123;</span><br><span class=\"line\">        console.log(&apos;\b汪汪汪&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var Duck=function()&#123;&#125;;</span><br><span class=\"line\">var Chicken=function()&#123;&#125;;</span><br><span class=\"line\">var Dog = function() &#123;&#125;;</span><br><span class=\"line\">makeSound(new Duck());//输出：嘎嘎嘎</span><br><span class=\"line\">makeSound(new Chicken());//输出：咯咯咯</span><br><span class=\"line\">makeSound(new Dog()); //输出：汪汪汪</span><br></pre></td></tr></table></figure></p>\n<p>上面的方式也可以实现功能。但是当需求增多的时候，需要修改的部分比较多。利用多态的思想，我们把程序中不变的部分隔离出来（动物都会叫），然后把可变的部分封装起来（不同类型的动物发出不同的叫声），这样一来程序就具有了可扩展性。当我们想让一只狗发出叫声时，只需增加一段代码即可，而不用去改动原有的makeSound函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var makeSound=function(animal)&#123;</span><br><span class=\"line\">    animal.sound();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var Duck=function()&#123;&#125;;</span><br><span class=\"line\">Duck.prototype.sound=function()&#123;</span><br><span class=\"line\">    console.log(&apos;嘎嘎嘎&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var Chicken=function()&#123;&#125;;</span><br><span class=\"line\">Chicken.prototype.sound=function()&#123;</span><br><span class=\"line\">    console.log(&apos;咯咯咯&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">makeSound(new Duck());//嘎嘎嘎</span><br><span class=\"line\">makeSound(new Chicken());//咯咯咯</span><br><span class=\"line\">/*********增加动物狗，不用改动原有的makeSound函数****************/</span><br><span class=\"line\">var Dog=function()&#123;&#125;;</span><br><span class=\"line\">Dog.prototype.sound=function()&#123;</span><br><span class=\"line\">    console.log(&apos;汪汪汪&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">makeSound(new Dog());//汪汪汪</span><br></pre></td></tr></table></figure></p>\n"},{"title":"开发环境优化之旅","date":"2019-08-14T07:08:33.000Z","cover_img":null,"feature_img":null,"description":null,"keywords":null,"_content":"为什么写这篇文章呢。现在的开发模式实在是太影响效率了。\n\n#### 这次做的需求是app内嵌h5。细数开发遇到的几宗罪。\n1、文件嵌套层级太深，前端目录结构应该为 /project/\n2、php嵌套html，同时css由scss编译生成。需要启动gulp，然后执行sync.sh。实在难言友好\n3、测试环境修改复杂。需要在自己分支开发，然后合并到测试分支看效果。\n4、开发和测试互相不理解。开发本地没问题，测试环境测试效果不达预期。各说各话，原因在于测试并不知道自己测试的是不是最新的文件。\n5、前端线上问题修改完需要后端上线。\n\n#### 针对以上问题提出我理解的解决方案。\n1、订制统一的脚手架。\n\n```javascript\n    - mia dev 进行开发\n    - mia dist 打包文件\n    - mia upload 上传文件到测试环境&预发环境（文件增加日期戳，测试验证前确定是新文件）\n    - mia check 进行代码检查\n```\n2、前端需要单独的测试服务器。\n``` javascript\n    - 测试环境 后端测试host 前端host\n    - 预发环境 后端仿真host 前端host\n```\n3、前端单独上线前端的文件\n","source":"_posts/开发环境优化之旅.md","raw":"---\ntitle: 开发环境优化之旅\ndate: 2019-08-14 15:08:33\ntags: [开发环境]\ncover_img:\nfeature_img:\ndescription:\nkeywords:\n---\n为什么写这篇文章呢。现在的开发模式实在是太影响效率了。\n\n#### 这次做的需求是app内嵌h5。细数开发遇到的几宗罪。\n1、文件嵌套层级太深，前端目录结构应该为 /project/\n2、php嵌套html，同时css由scss编译生成。需要启动gulp，然后执行sync.sh。实在难言友好\n3、测试环境修改复杂。需要在自己分支开发，然后合并到测试分支看效果。\n4、开发和测试互相不理解。开发本地没问题，测试环境测试效果不达预期。各说各话，原因在于测试并不知道自己测试的是不是最新的文件。\n5、前端线上问题修改完需要后端上线。\n\n#### 针对以上问题提出我理解的解决方案。\n1、订制统一的脚手架。\n\n```javascript\n    - mia dev 进行开发\n    - mia dist 打包文件\n    - mia upload 上传文件到测试环境&预发环境（文件增加日期戳，测试验证前确定是新文件）\n    - mia check 进行代码检查\n```\n2、前端需要单独的测试服务器。\n``` javascript\n    - 测试环境 后端测试host 前端host\n    - 预发环境 后端仿真host 前端host\n```\n3、前端单独上线前端的文件\n","slug":"开发环境优化之旅","published":1,"updated":"2019-08-14T08:12:11.227Z","_id":"cjzaz4d24000tnpmkx556aet7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>为什么写这篇文章呢。现在的开发模式实在是太影响效率了。</p>\n<h4 id=\"这次做的需求是app内嵌h5。细数开发遇到的几宗罪。\"><a href=\"#这次做的需求是app内嵌h5。细数开发遇到的几宗罪。\" class=\"headerlink\" title=\"这次做的需求是app内嵌h5。细数开发遇到的几宗罪。\"></a>这次做的需求是app内嵌h5。细数开发遇到的几宗罪。</h4><p>1、文件嵌套层级太深，前端目录结构应该为 /project/<br>2、php嵌套html，同时css由scss编译生成。需要启动gulp，然后执行sync.sh。实在难言友好<br>3、测试环境修改复杂。需要在自己分支开发，然后合并到测试分支看效果。<br>4、开发和测试互相不理解。开发本地没问题，测试环境测试效果不达预期。各说各话，原因在于测试并不知道自己测试的是不是最新的文件。<br>5、前端线上问题修改完需要后端上线。</p>\n<h4 id=\"针对以上问题提出我理解的解决方案。\"><a href=\"#针对以上问题提出我理解的解决方案。\" class=\"headerlink\" title=\"针对以上问题提出我理解的解决方案。\"></a>针对以上问题提出我理解的解决方案。</h4><p>1、订制统一的脚手架。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- mia dev 进行开发</span><br><span class=\"line\">- mia dist 打包文件</span><br><span class=\"line\">- mia upload 上传文件到测试环境&amp;预发环境（文件增加日期戳，测试验证前确定是新文件）</span><br><span class=\"line\">- mia check 进行代码检查</span><br></pre></td></tr></table></figure>\n<p>2、前端需要单独的测试服务器。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 测试环境 后端测试host 前端host</span><br><span class=\"line\">- 预发环境 后端仿真host 前端host</span><br></pre></td></tr></table></figure></p>\n<p>3、前端单独上线前端的文件</p>\n","site":{"data":{}},"excerpt":"","more":"<p>为什么写这篇文章呢。现在的开发模式实在是太影响效率了。</p>\n<h4 id=\"这次做的需求是app内嵌h5。细数开发遇到的几宗罪。\"><a href=\"#这次做的需求是app内嵌h5。细数开发遇到的几宗罪。\" class=\"headerlink\" title=\"这次做的需求是app内嵌h5。细数开发遇到的几宗罪。\"></a>这次做的需求是app内嵌h5。细数开发遇到的几宗罪。</h4><p>1、文件嵌套层级太深，前端目录结构应该为 /project/<br>2、php嵌套html，同时css由scss编译生成。需要启动gulp，然后执行sync.sh。实在难言友好<br>3、测试环境修改复杂。需要在自己分支开发，然后合并到测试分支看效果。<br>4、开发和测试互相不理解。开发本地没问题，测试环境测试效果不达预期。各说各话，原因在于测试并不知道自己测试的是不是最新的文件。<br>5、前端线上问题修改完需要后端上线。</p>\n<h4 id=\"针对以上问题提出我理解的解决方案。\"><a href=\"#针对以上问题提出我理解的解决方案。\" class=\"headerlink\" title=\"针对以上问题提出我理解的解决方案。\"></a>针对以上问题提出我理解的解决方案。</h4><p>1、订制统一的脚手架。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- mia dev 进行开发</span><br><span class=\"line\">- mia dist 打包文件</span><br><span class=\"line\">- mia upload 上传文件到测试环境&amp;预发环境（文件增加日期戳，测试验证前确定是新文件）</span><br><span class=\"line\">- mia check 进行代码检查</span><br></pre></td></tr></table></figure>\n<p>2、前端需要单独的测试服务器。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 测试环境 后端测试host 前端host</span><br><span class=\"line\">- 预发环境 后端仿真host 前端host</span><br></pre></td></tr></table></figure></p>\n<p>3、前端单独上线前端的文件</p>\n"},{"title":"未来的生活怎么改变","date":"2019-08-14T07:08:07.000Z","cover_img":null,"feature_img":null,"description":null,"keywords":null,"_content":"突然有个想法。回过头，从十年前演化到现在。猜猜未来是怎样。\n\n### 09-19\n#### 通信：\n- 3G：08年国际电信联盟正式公布第三代移动通信标准。\n- 4G：2013年。\n- 5G：2019年工信部颁发商用拍照。\n\n每一代通信技术升级，最直观的就是网速更快。3G时还是PC为主，手机有一些wap版的互联网产品。4G时代，app横行，每一个垂直行业的需求通过app实现。\n\n#### 社交：\n- 05年人人网。\n- 09年微博。\n- 11年推出微信。\n- 11年快手。\n- 16年抖音。\n\n人人网和微博本质上还和贴吧论坛的形式是一样的，在一个纬度竞争。微信是一个新的纬度。快手和抖音是一个维度。一个纬度比一个纬度的内容更丰富。\n\n#### 出行\n- 10年易到用车\n- 15年滴滴出行\n- 15年ofo共享单车\n易到作为先驱者。并没有笑到最后，原因在于10年智能手机还很贵，数据传输还很慢，算法还很慢。【10年小米刚刚成立，互联网的发展同样得益于小米的努力。将智能机带入千元机行列，让大多数人都买得起的正品智能机。】滴滴恰好在这几个方面都占了优势。ofo当然现在难以为继，最大的问题在于没有采用智能芯片。车辆无法管理，数据化运营很难做到。\n\n19年5G开始，预计到20-21年才能真正的像4G一样普及。3G到4G的改变如此之大，5G带来的变化更是颠覆性的。\n\n社交娱乐从文字+图片==>文字+语音+视频===>全部视频。内容的展现越来越丰富，未来我们可能不能不满足2D的娱乐形式，我们需要体验身临其境。VR+AR技术的运用，可能会实现我们在家里也能体会到现场逛故宫的感受。和远方的朋友不是视频喝茶聊天，可能出现一种技术，解决我们对于空间感受的压缩，远程办公将会很普遍，公司只需要提供极小的办公场地。\n\n以Tesla为首的无人驾驶技术，以后我们乘坐的出租、公交可能都是无人驾驶。同时为了不丧失驾驶的体验，为了安全性，我们拿到的车完全是一个大的智能硬件。在app就能看到车的各项表现、刹车性能、电量、轮胎气压等等。\n\n从功能机到智能机，现在的业界是5G的智能机。我们可能也会有新的交互方式的手机。\n\n总之，5G带来的变化是值得期待的。大胆想象，现实总会狠狠抽你一个嘴巴，你的想象力还不够。\n\n","source":"_posts/未来的生活怎么改变.md","raw":"---\ntitle: 未来的生活怎么改变\ndate: 2019-08-14 15:08:07\ntags: [未来, 商业]\ncover_img:\nfeature_img:\ndescription:\nkeywords:\n---\n突然有个想法。回过头，从十年前演化到现在。猜猜未来是怎样。\n\n### 09-19\n#### 通信：\n- 3G：08年国际电信联盟正式公布第三代移动通信标准。\n- 4G：2013年。\n- 5G：2019年工信部颁发商用拍照。\n\n每一代通信技术升级，最直观的就是网速更快。3G时还是PC为主，手机有一些wap版的互联网产品。4G时代，app横行，每一个垂直行业的需求通过app实现。\n\n#### 社交：\n- 05年人人网。\n- 09年微博。\n- 11年推出微信。\n- 11年快手。\n- 16年抖音。\n\n人人网和微博本质上还和贴吧论坛的形式是一样的，在一个纬度竞争。微信是一个新的纬度。快手和抖音是一个维度。一个纬度比一个纬度的内容更丰富。\n\n#### 出行\n- 10年易到用车\n- 15年滴滴出行\n- 15年ofo共享单车\n易到作为先驱者。并没有笑到最后，原因在于10年智能手机还很贵，数据传输还很慢，算法还很慢。【10年小米刚刚成立，互联网的发展同样得益于小米的努力。将智能机带入千元机行列，让大多数人都买得起的正品智能机。】滴滴恰好在这几个方面都占了优势。ofo当然现在难以为继，最大的问题在于没有采用智能芯片。车辆无法管理，数据化运营很难做到。\n\n19年5G开始，预计到20-21年才能真正的像4G一样普及。3G到4G的改变如此之大，5G带来的变化更是颠覆性的。\n\n社交娱乐从文字+图片==>文字+语音+视频===>全部视频。内容的展现越来越丰富，未来我们可能不能不满足2D的娱乐形式，我们需要体验身临其境。VR+AR技术的运用，可能会实现我们在家里也能体会到现场逛故宫的感受。和远方的朋友不是视频喝茶聊天，可能出现一种技术，解决我们对于空间感受的压缩，远程办公将会很普遍，公司只需要提供极小的办公场地。\n\n以Tesla为首的无人驾驶技术，以后我们乘坐的出租、公交可能都是无人驾驶。同时为了不丧失驾驶的体验，为了安全性，我们拿到的车完全是一个大的智能硬件。在app就能看到车的各项表现、刹车性能、电量、轮胎气压等等。\n\n从功能机到智能机，现在的业界是5G的智能机。我们可能也会有新的交互方式的手机。\n\n总之，5G带来的变化是值得期待的。大胆想象，现实总会狠狠抽你一个嘴巴，你的想象力还不够。\n\n","slug":"未来的生活怎么改变","published":1,"updated":"2019-08-14T08:08:35.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzaz4d25000vnpmkgv5eyr11","content":"<p>突然有个想法。回过头，从十年前演化到现在。猜猜未来是怎样。</p>\n<h3 id=\"09-19\"><a href=\"#09-19\" class=\"headerlink\" title=\"09-19\"></a>09-19</h3><h4 id=\"通信：\"><a href=\"#通信：\" class=\"headerlink\" title=\"通信：\"></a>通信：</h4><ul>\n<li>3G：08年国际电信联盟正式公布第三代移动通信标准。</li>\n<li>4G：2013年。</li>\n<li>5G：2019年工信部颁发商用拍照。</li>\n</ul>\n<p>每一代通信技术升级，最直观的就是网速更快。3G时还是PC为主，手机有一些wap版的互联网产品。4G时代，app横行，每一个垂直行业的需求通过app实现。</p>\n<h4 id=\"社交：\"><a href=\"#社交：\" class=\"headerlink\" title=\"社交：\"></a>社交：</h4><ul>\n<li>05年人人网。</li>\n<li>09年微博。</li>\n<li>11年推出微信。</li>\n<li>11年快手。</li>\n<li>16年抖音。</li>\n</ul>\n<p>人人网和微博本质上还和贴吧论坛的形式是一样的，在一个纬度竞争。微信是一个新的纬度。快手和抖音是一个维度。一个纬度比一个纬度的内容更丰富。</p>\n<h4 id=\"出行\"><a href=\"#出行\" class=\"headerlink\" title=\"出行\"></a>出行</h4><ul>\n<li>10年易到用车</li>\n<li>15年滴滴出行</li>\n<li>15年ofo共享单车<br>易到作为先驱者。并没有笑到最后，原因在于10年智能手机还很贵，数据传输还很慢，算法还很慢。【10年小米刚刚成立，互联网的发展同样得益于小米的努力。将智能机带入千元机行列，让大多数人都买得起的正品智能机。】滴滴恰好在这几个方面都占了优势。ofo当然现在难以为继，最大的问题在于没有采用智能芯片。车辆无法管理，数据化运营很难做到。</li>\n</ul>\n<p>19年5G开始，预计到20-21年才能真正的像4G一样普及。3G到4G的改变如此之大，5G带来的变化更是颠覆性的。</p>\n<p>社交娱乐从文字+图片==&gt;文字+语音+视频===&gt;全部视频。内容的展现越来越丰富，未来我们可能不能不满足2D的娱乐形式，我们需要体验身临其境。VR+AR技术的运用，可能会实现我们在家里也能体会到现场逛故宫的感受。和远方的朋友不是视频喝茶聊天，可能出现一种技术，解决我们对于空间感受的压缩，远程办公将会很普遍，公司只需要提供极小的办公场地。</p>\n<p>以Tesla为首的无人驾驶技术，以后我们乘坐的出租、公交可能都是无人驾驶。同时为了不丧失驾驶的体验，为了安全性，我们拿到的车完全是一个大的智能硬件。在app就能看到车的各项表现、刹车性能、电量、轮胎气压等等。</p>\n<p>从功能机到智能机，现在的业界是5G的智能机。我们可能也会有新的交互方式的手机。</p>\n<p>总之，5G带来的变化是值得期待的。大胆想象，现实总会狠狠抽你一个嘴巴，你的想象力还不够。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>突然有个想法。回过头，从十年前演化到现在。猜猜未来是怎样。</p>\n<h3 id=\"09-19\"><a href=\"#09-19\" class=\"headerlink\" title=\"09-19\"></a>09-19</h3><h4 id=\"通信：\"><a href=\"#通信：\" class=\"headerlink\" title=\"通信：\"></a>通信：</h4><ul>\n<li>3G：08年国际电信联盟正式公布第三代移动通信标准。</li>\n<li>4G：2013年。</li>\n<li>5G：2019年工信部颁发商用拍照。</li>\n</ul>\n<p>每一代通信技术升级，最直观的就是网速更快。3G时还是PC为主，手机有一些wap版的互联网产品。4G时代，app横行，每一个垂直行业的需求通过app实现。</p>\n<h4 id=\"社交：\"><a href=\"#社交：\" class=\"headerlink\" title=\"社交：\"></a>社交：</h4><ul>\n<li>05年人人网。</li>\n<li>09年微博。</li>\n<li>11年推出微信。</li>\n<li>11年快手。</li>\n<li>16年抖音。</li>\n</ul>\n<p>人人网和微博本质上还和贴吧论坛的形式是一样的，在一个纬度竞争。微信是一个新的纬度。快手和抖音是一个维度。一个纬度比一个纬度的内容更丰富。</p>\n<h4 id=\"出行\"><a href=\"#出行\" class=\"headerlink\" title=\"出行\"></a>出行</h4><ul>\n<li>10年易到用车</li>\n<li>15年滴滴出行</li>\n<li>15年ofo共享单车<br>易到作为先驱者。并没有笑到最后，原因在于10年智能手机还很贵，数据传输还很慢，算法还很慢。【10年小米刚刚成立，互联网的发展同样得益于小米的努力。将智能机带入千元机行列，让大多数人都买得起的正品智能机。】滴滴恰好在这几个方面都占了优势。ofo当然现在难以为继，最大的问题在于没有采用智能芯片。车辆无法管理，数据化运营很难做到。</li>\n</ul>\n<p>19年5G开始，预计到20-21年才能真正的像4G一样普及。3G到4G的改变如此之大，5G带来的变化更是颠覆性的。</p>\n<p>社交娱乐从文字+图片==&gt;文字+语音+视频===&gt;全部视频。内容的展现越来越丰富，未来我们可能不能不满足2D的娱乐形式，我们需要体验身临其境。VR+AR技术的运用，可能会实现我们在家里也能体会到现场逛故宫的感受。和远方的朋友不是视频喝茶聊天，可能出现一种技术，解决我们对于空间感受的压缩，远程办公将会很普遍，公司只需要提供极小的办公场地。</p>\n<p>以Tesla为首的无人驾驶技术，以后我们乘坐的出租、公交可能都是无人驾驶。同时为了不丧失驾驶的体验，为了安全性，我们拿到的车完全是一个大的智能硬件。在app就能看到车的各项表现、刹车性能、电量、轮胎气压等等。</p>\n<p>从功能机到智能机，现在的业界是5G的智能机。我们可能也会有新的交互方式的手机。</p>\n<p>总之，5G带来的变化是值得期待的。大胆想象，现实总会狠狠抽你一个嘴巴，你的想象力还不够。</p>\n"},{"title":"微信小程序生成海报","date":"2019-06-21T05:50:43.000Z","cover_img":null,"feature_img":null,"description":null,"keywords":null,"_content":"最近接到一个需求，小程序生成海报图片，然后分享。偶然发现天猫现在分享也用了这个。\n\n感觉技术还是很厉害，他规避了朋友圈不能分享的问题，大家可以在朋友圈分享图片，增大产品的触达用户。\n\n网上给了一些案例，大多使用canvas实现的。有几个不错的库，[html2canvas](https://github.com/niklasvh/html2canvas)和[dom-to-image](https://github.com/tsayen/dom-to-image)。这两者需要操作dom的一些API，但由于微信小程序不能使用dom API。当时的想法是，wxml和html之间可以建一座桥梁，让wxml可以使用html的一些API。只是没有细心验证了。\n\n然后决定自己画，可由于之前接触canvas太少了，画起来很吃力。然后有去找其他的解决方案。这时候遇到了[Painter](https://github.com/Kujiale-Mobile/Painter),目前采用这种方案解决的。\n\nPainter也是通过canvas绘图解决的。它用起来就比较解决css了，通过指定的规则，写一些json数据，然后通过模版去解析。不支持z-index层级，目前没有满足我需求的一个地方。\n\ncanvas绘图的两个问题。绘图较慢，绘图模糊失真的问题。提出一个大胆假设，是否可以绘制矢量图。","source":"_posts/微信小程序生成海报.md","raw":"---\ntitle: 微信小程序生成海报\ndate: 2019-06-21 13:50:43\ntags: [微信小程序, 海报]\ncover_img:\nfeature_img:\ndescription:\nkeywords:\n---\n最近接到一个需求，小程序生成海报图片，然后分享。偶然发现天猫现在分享也用了这个。\n\n感觉技术还是很厉害，他规避了朋友圈不能分享的问题，大家可以在朋友圈分享图片，增大产品的触达用户。\n\n网上给了一些案例，大多使用canvas实现的。有几个不错的库，[html2canvas](https://github.com/niklasvh/html2canvas)和[dom-to-image](https://github.com/tsayen/dom-to-image)。这两者需要操作dom的一些API，但由于微信小程序不能使用dom API。当时的想法是，wxml和html之间可以建一座桥梁，让wxml可以使用html的一些API。只是没有细心验证了。\n\n然后决定自己画，可由于之前接触canvas太少了，画起来很吃力。然后有去找其他的解决方案。这时候遇到了[Painter](https://github.com/Kujiale-Mobile/Painter),目前采用这种方案解决的。\n\nPainter也是通过canvas绘图解决的。它用起来就比较解决css了，通过指定的规则，写一些json数据，然后通过模版去解析。不支持z-index层级，目前没有满足我需求的一个地方。\n\ncanvas绘图的两个问题。绘图较慢，绘图模糊失真的问题。提出一个大胆假设，是否可以绘制矢量图。","slug":"微信小程序生成海报","published":1,"updated":"2019-06-21T06:34:30.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzaz4d26000wnpmkhamb5e8u","content":"<p>最近接到一个需求，小程序生成海报图片，然后分享。偶然发现天猫现在分享也用了这个。</p>\n<p>感觉技术还是很厉害，他规避了朋友圈不能分享的问题，大家可以在朋友圈分享图片，增大产品的触达用户。</p>\n<p>网上给了一些案例，大多使用canvas实现的。有几个不错的库，<a href=\"https://github.com/niklasvh/html2canvas\" target=\"_blank\" rel=\"noopener\">html2canvas</a>和<a href=\"https://github.com/tsayen/dom-to-image\" target=\"_blank\" rel=\"noopener\">dom-to-image</a>。这两者需要操作dom的一些API，但由于微信小程序不能使用dom API。当时的想法是，wxml和html之间可以建一座桥梁，让wxml可以使用html的一些API。只是没有细心验证了。</p>\n<p>然后决定自己画，可由于之前接触canvas太少了，画起来很吃力。然后有去找其他的解决方案。这时候遇到了<a href=\"https://github.com/Kujiale-Mobile/Painter\" target=\"_blank\" rel=\"noopener\">Painter</a>,目前采用这种方案解决的。</p>\n<p>Painter也是通过canvas绘图解决的。它用起来就比较解决css了，通过指定的规则，写一些json数据，然后通过模版去解析。不支持z-index层级，目前没有满足我需求的一个地方。</p>\n<p>canvas绘图的两个问题。绘图较慢，绘图模糊失真的问题。提出一个大胆假设，是否可以绘制矢量图。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近接到一个需求，小程序生成海报图片，然后分享。偶然发现天猫现在分享也用了这个。</p>\n<p>感觉技术还是很厉害，他规避了朋友圈不能分享的问题，大家可以在朋友圈分享图片，增大产品的触达用户。</p>\n<p>网上给了一些案例，大多使用canvas实现的。有几个不错的库，<a href=\"https://github.com/niklasvh/html2canvas\" target=\"_blank\" rel=\"noopener\">html2canvas</a>和<a href=\"https://github.com/tsayen/dom-to-image\" target=\"_blank\" rel=\"noopener\">dom-to-image</a>。这两者需要操作dom的一些API，但由于微信小程序不能使用dom API。当时的想法是，wxml和html之间可以建一座桥梁，让wxml可以使用html的一些API。只是没有细心验证了。</p>\n<p>然后决定自己画，可由于之前接触canvas太少了，画起来很吃力。然后有去找其他的解决方案。这时候遇到了<a href=\"https://github.com/Kujiale-Mobile/Painter\" target=\"_blank\" rel=\"noopener\">Painter</a>,目前采用这种方案解决的。</p>\n<p>Painter也是通过canvas绘图解决的。它用起来就比较解决css了，通过指定的规则，写一些json数据，然后通过模版去解析。不支持z-index层级，目前没有满足我需求的一个地方。</p>\n<p>canvas绘图的两个问题。绘图较慢，绘图模糊失真的问题。提出一个大胆假设，是否可以绘制矢量图。</p>\n"},{"title":"低风险创业","date":"2019-06-21T05:50:12.000Z","cover_img":null,"feature_img":null,"description":null,"keywords":"创业|反脆弱","_content":"#### 什么是反脆弱\n前几天看到樊登老师的一个演讲，主题就是低风险创业。里面讲到一个有意思的词，“反脆弱”。那么什么是反脆弱呢？拿我举例来说，比如我计划买房，薪资cover月供也没什么问题，但有一个问题，如果我遭遇被离职这件事，月供是否还能稳定供应就是个问题了。\n\n反脆弱的意思是指，你当前在做的这件事，如果遇到了重大的变故无以为继的时候，你依然可以很好的应对，甚至更好。比如，你除了薪资之外，还有第二第三职业可以比主业挣得更多，那么就算你被离职，也会有新的职业顶上去，甚至比之前挣到的更多。\n\n#### 为什么要低风险创业\n我们这代人其实是很焦虑的。因为互联网，我们可以知道顶级富豪的生活，可以看到明星们的生活，人们会产生攀比追逐。人们对美好生活有着无尽向往，所以会对财富有近乎疯狂的痴迷。同时我们面临巨大的压力和竞争，比如我们要还房贷，就业压力大等。同时随着社会阶层逐渐固定，创业成了更好实现财富自由的一种途径。\n\n那为什么要低风险兼职创业呢。我们有稳定的现金流支持，这件事本身是反脆弱的。就算创业不成功，不会影响我们的生活。兼职创业，可以让我们敢于更大胆的创新。\n\n樊登老师呢，自己在学校讲课做老师，每月挣6000元。他验证了自己创业的事情后，年销售额超过5000w的时候，他才放弃了自己月薪6000的工作。我们注意到，他这个其实是反脆弱的，如果成了，他可以全职搞创业这件事。如果不成，他还可以稳稳妥妥的拿着月薪6000，对生活没有什么影响。\n\n#### 价值假设\n创业其实就是解决一部分人的问题，并且有人愿意为此买单。这就是价值假设，有人愿意为你的产品、创业、设计买单，证明创业的是事情是可行的。\n\n#### 增长假设\n验证了需求之后，还能指数级增长，那这就是个好生意。比如，你给人画画挣钱，一幅画1000，你画就能卖出去，就能挣到钱，但你不画，钱就停止了。与此相反的是，版权、知识付费等。版权你可以一直收，直至去世50年。知识付费，现在很多大V录一些音频、视频，录完之后，这件事情的成本就固定了，然后由各平台，各代理商去销售，只要用户在增长，他的这个收益就在不断增长。\n\n以上就是关于低风险创业的一些内容。希望读者可以找到适合自己的创业。摆脱焦虑，让生活更从容，让精神更自由。\n","source":"_posts/低风险创业.md","raw":"---\ntitle: 低风险创业\ndate: 2019-06-21 13:50:12\ntags: [创业]\ncover_img:\nfeature_img:\ndescription: \nkeywords: 创业|反脆弱\n---\n#### 什么是反脆弱\n前几天看到樊登老师的一个演讲，主题就是低风险创业。里面讲到一个有意思的词，“反脆弱”。那么什么是反脆弱呢？拿我举例来说，比如我计划买房，薪资cover月供也没什么问题，但有一个问题，如果我遭遇被离职这件事，月供是否还能稳定供应就是个问题了。\n\n反脆弱的意思是指，你当前在做的这件事，如果遇到了重大的变故无以为继的时候，你依然可以很好的应对，甚至更好。比如，你除了薪资之外，还有第二第三职业可以比主业挣得更多，那么就算你被离职，也会有新的职业顶上去，甚至比之前挣到的更多。\n\n#### 为什么要低风险创业\n我们这代人其实是很焦虑的。因为互联网，我们可以知道顶级富豪的生活，可以看到明星们的生活，人们会产生攀比追逐。人们对美好生活有着无尽向往，所以会对财富有近乎疯狂的痴迷。同时我们面临巨大的压力和竞争，比如我们要还房贷，就业压力大等。同时随着社会阶层逐渐固定，创业成了更好实现财富自由的一种途径。\n\n那为什么要低风险兼职创业呢。我们有稳定的现金流支持，这件事本身是反脆弱的。就算创业不成功，不会影响我们的生活。兼职创业，可以让我们敢于更大胆的创新。\n\n樊登老师呢，自己在学校讲课做老师，每月挣6000元。他验证了自己创业的事情后，年销售额超过5000w的时候，他才放弃了自己月薪6000的工作。我们注意到，他这个其实是反脆弱的，如果成了，他可以全职搞创业这件事。如果不成，他还可以稳稳妥妥的拿着月薪6000，对生活没有什么影响。\n\n#### 价值假设\n创业其实就是解决一部分人的问题，并且有人愿意为此买单。这就是价值假设，有人愿意为你的产品、创业、设计买单，证明创业的是事情是可行的。\n\n#### 增长假设\n验证了需求之后，还能指数级增长，那这就是个好生意。比如，你给人画画挣钱，一幅画1000，你画就能卖出去，就能挣到钱，但你不画，钱就停止了。与此相反的是，版权、知识付费等。版权你可以一直收，直至去世50年。知识付费，现在很多大V录一些音频、视频，录完之后，这件事情的成本就固定了，然后由各平台，各代理商去销售，只要用户在增长，他的这个收益就在不断增长。\n\n以上就是关于低风险创业的一些内容。希望读者可以找到适合自己的创业。摆脱焦虑，让生活更从容，让精神更自由。\n","slug":"低风险创业","published":1,"updated":"2019-06-21T06:20:13.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzaz4d26000xnpmk9ot0ljvs","content":"<h4 id=\"什么是反脆弱\"><a href=\"#什么是反脆弱\" class=\"headerlink\" title=\"什么是反脆弱\"></a>什么是反脆弱</h4><p>前几天看到樊登老师的一个演讲，主题就是低风险创业。里面讲到一个有意思的词，“反脆弱”。那么什么是反脆弱呢？拿我举例来说，比如我计划买房，薪资cover月供也没什么问题，但有一个问题，如果我遭遇被离职这件事，月供是否还能稳定供应就是个问题了。</p>\n<p>反脆弱的意思是指，你当前在做的这件事，如果遇到了重大的变故无以为继的时候，你依然可以很好的应对，甚至更好。比如，你除了薪资之外，还有第二第三职业可以比主业挣得更多，那么就算你被离职，也会有新的职业顶上去，甚至比之前挣到的更多。</p>\n<h4 id=\"为什么要低风险创业\"><a href=\"#为什么要低风险创业\" class=\"headerlink\" title=\"为什么要低风险创业\"></a>为什么要低风险创业</h4><p>我们这代人其实是很焦虑的。因为互联网，我们可以知道顶级富豪的生活，可以看到明星们的生活，人们会产生攀比追逐。人们对美好生活有着无尽向往，所以会对财富有近乎疯狂的痴迷。同时我们面临巨大的压力和竞争，比如我们要还房贷，就业压力大等。同时随着社会阶层逐渐固定，创业成了更好实现财富自由的一种途径。</p>\n<p>那为什么要低风险兼职创业呢。我们有稳定的现金流支持，这件事本身是反脆弱的。就算创业不成功，不会影响我们的生活。兼职创业，可以让我们敢于更大胆的创新。</p>\n<p>樊登老师呢，自己在学校讲课做老师，每月挣6000元。他验证了自己创业的事情后，年销售额超过5000w的时候，他才放弃了自己月薪6000的工作。我们注意到，他这个其实是反脆弱的，如果成了，他可以全职搞创业这件事。如果不成，他还可以稳稳妥妥的拿着月薪6000，对生活没有什么影响。</p>\n<h4 id=\"价值假设\"><a href=\"#价值假设\" class=\"headerlink\" title=\"价值假设\"></a>价值假设</h4><p>创业其实就是解决一部分人的问题，并且有人愿意为此买单。这就是价值假设，有人愿意为你的产品、创业、设计买单，证明创业的是事情是可行的。</p>\n<h4 id=\"增长假设\"><a href=\"#增长假设\" class=\"headerlink\" title=\"增长假设\"></a>增长假设</h4><p>验证了需求之后，还能指数级增长，那这就是个好生意。比如，你给人画画挣钱，一幅画1000，你画就能卖出去，就能挣到钱，但你不画，钱就停止了。与此相反的是，版权、知识付费等。版权你可以一直收，直至去世50年。知识付费，现在很多大V录一些音频、视频，录完之后，这件事情的成本就固定了，然后由各平台，各代理商去销售，只要用户在增长，他的这个收益就在不断增长。</p>\n<p>以上就是关于低风险创业的一些内容。希望读者可以找到适合自己的创业。摆脱焦虑，让生活更从容，让精神更自由。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"什么是反脆弱\"><a href=\"#什么是反脆弱\" class=\"headerlink\" title=\"什么是反脆弱\"></a>什么是反脆弱</h4><p>前几天看到樊登老师的一个演讲，主题就是低风险创业。里面讲到一个有意思的词，“反脆弱”。那么什么是反脆弱呢？拿我举例来说，比如我计划买房，薪资cover月供也没什么问题，但有一个问题，如果我遭遇被离职这件事，月供是否还能稳定供应就是个问题了。</p>\n<p>反脆弱的意思是指，你当前在做的这件事，如果遇到了重大的变故无以为继的时候，你依然可以很好的应对，甚至更好。比如，你除了薪资之外，还有第二第三职业可以比主业挣得更多，那么就算你被离职，也会有新的职业顶上去，甚至比之前挣到的更多。</p>\n<h4 id=\"为什么要低风险创业\"><a href=\"#为什么要低风险创业\" class=\"headerlink\" title=\"为什么要低风险创业\"></a>为什么要低风险创业</h4><p>我们这代人其实是很焦虑的。因为互联网，我们可以知道顶级富豪的生活，可以看到明星们的生活，人们会产生攀比追逐。人们对美好生活有着无尽向往，所以会对财富有近乎疯狂的痴迷。同时我们面临巨大的压力和竞争，比如我们要还房贷，就业压力大等。同时随着社会阶层逐渐固定，创业成了更好实现财富自由的一种途径。</p>\n<p>那为什么要低风险兼职创业呢。我们有稳定的现金流支持，这件事本身是反脆弱的。就算创业不成功，不会影响我们的生活。兼职创业，可以让我们敢于更大胆的创新。</p>\n<p>樊登老师呢，自己在学校讲课做老师，每月挣6000元。他验证了自己创业的事情后，年销售额超过5000w的时候，他才放弃了自己月薪6000的工作。我们注意到，他这个其实是反脆弱的，如果成了，他可以全职搞创业这件事。如果不成，他还可以稳稳妥妥的拿着月薪6000，对生活没有什么影响。</p>\n<h4 id=\"价值假设\"><a href=\"#价值假设\" class=\"headerlink\" title=\"价值假设\"></a>价值假设</h4><p>创业其实就是解决一部分人的问题，并且有人愿意为此买单。这就是价值假设，有人愿意为你的产品、创业、设计买单，证明创业的是事情是可行的。</p>\n<h4 id=\"增长假设\"><a href=\"#增长假设\" class=\"headerlink\" title=\"增长假设\"></a>增长假设</h4><p>验证了需求之后，还能指数级增长，那这就是个好生意。比如，你给人画画挣钱，一幅画1000，你画就能卖出去，就能挣到钱，但你不画，钱就停止了。与此相反的是，版权、知识付费等。版权你可以一直收，直至去世50年。知识付费，现在很多大V录一些音频、视频，录完之后，这件事情的成本就固定了，然后由各平台，各代理商去销售，只要用户在增长，他的这个收益就在不断增长。</p>\n<p>以上就是关于低风险创业的一些内容。希望读者可以找到适合自己的创业。摆脱焦虑，让生活更从容，让精神更自由。</p>\n"},{"title":"相信时间的力量","date":"2019-04-13T12:08:32.000Z","cover_img":null,"feature_img":null,"description":null,"keywords":null,"_content":"### 接受不安\n有时候，我发现自己会没来由的不开心或者情绪失落。又或者是早上心情很好，自信满满，情绪高涨，全是积极向上的情绪。但到了中午或者下午又或者是晚上，就会没来由的失落。我们要接受这是一种正常的，合理的表现。\n\n在负面情绪很激烈的时候，需要暗示自己。“交给时间，一切都会过去的”。所以也就需要做到平常心，志得意满时留一分，灰心丧气时打打气。\n\n这样也\b更容易做到不和别人攀比，更多的专注于自己内心的想法和感受。\n\n### 时间有魔力\n从去年到现在，个人感觉经历还算丰富。先是从上市公司辞职，然后自己创业。创业失败之后，进入一家E轮融资的母婴电商任职。\n\n这中间还包括爱情。去年1月23号，我刚认识现在的女友。根本不敢想象，在追了276天终于追到了女神。同时也结束了第一份工作。开启了第一份创业。很多人都想要创业，但都没走出这一步。我走出了这一步，只是结果不尽如人意。\n\n以上想表达的就是，时间总会给人惊喜。在当下某一个阶段觉得比较难的时候，坚持住。困境总会过去的。同样的，当下不管有多么得意，也需要保持敬畏之心。人生起起伏伏，保持正常心。\n\n\n","source":"_posts/相信时间的力量.md","raw":"---\ntitle: 相信时间的力量\ndate: 2019-04-13 20:08:32\ntags: [情绪, 时间, 随笔]\ncover_img:\nfeature_img:\ndescription:\nkeywords:\n---\n### 接受不安\n有时候，我发现自己会没来由的不开心或者情绪失落。又或者是早上心情很好，自信满满，情绪高涨，全是积极向上的情绪。但到了中午或者下午又或者是晚上，就会没来由的失落。我们要接受这是一种正常的，合理的表现。\n\n在负面情绪很激烈的时候，需要暗示自己。“交给时间，一切都会过去的”。所以也就需要做到平常心，志得意满时留一分，灰心丧气时打打气。\n\n这样也\b更容易做到不和别人攀比，更多的专注于自己内心的想法和感受。\n\n### 时间有魔力\n从去年到现在，个人感觉经历还算丰富。先是从上市公司辞职，然后自己创业。创业失败之后，进入一家E轮融资的母婴电商任职。\n\n这中间还包括爱情。去年1月23号，我刚认识现在的女友。根本不敢想象，在追了276天终于追到了女神。同时也结束了第一份工作。开启了第一份创业。很多人都想要创业，但都没走出这一步。我走出了这一步，只是结果不尽如人意。\n\n以上想表达的就是，时间总会给人惊喜。在当下某一个阶段觉得比较难的时候，坚持住。困境总会过去的。同样的，当下不管有多么得意，也需要保持敬畏之心。人生起起伏伏，保持正常心。\n\n\n","slug":"相信时间的力量","published":1,"updated":"2019-04-14T11:31:50.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzaz4d270010npmks9pnnru9","content":"<h3 id=\"接受不安\"><a href=\"#接受不安\" class=\"headerlink\" title=\"接受不安\"></a>接受不安</h3><p>有时候，我发现自己会没来由的不开心或者情绪失落。又或者是早上心情很好，自信满满，情绪高涨，全是积极向上的情绪。但到了中午或者下午又或者是晚上，就会没来由的失落。我们要接受这是一种正常的，合理的表现。</p>\n<p>在负面情绪很激烈的时候，需要暗示自己。“交给时间，一切都会过去的”。所以也就需要做到平常心，志得意满时留一分，灰心丧气时打打气。</p>\n<p>这样也\b更容易做到不和别人攀比，更多的专注于自己内心的想法和感受。</p>\n<h3 id=\"时间有魔力\"><a href=\"#时间有魔力\" class=\"headerlink\" title=\"时间有魔力\"></a>时间有魔力</h3><p>从去年到现在，个人感觉经历还算丰富。先是从上市公司辞职，然后自己创业。创业失败之后，进入一家E轮融资的母婴电商任职。</p>\n<p>这中间还包括爱情。去年1月23号，我刚认识现在的女友。根本不敢想象，在追了276天终于追到了女神。同时也结束了第一份工作。开启了第一份创业。很多人都想要创业，但都没走出这一步。我走出了这一步，只是结果不尽如人意。</p>\n<p>以上想表达的就是，时间总会给人惊喜。在当下某一个阶段觉得比较难的时候，坚持住。困境总会过去的。同样的，当下不管有多么得意，也需要保持敬畏之心。人生起起伏伏，保持正常心。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"接受不安\"><a href=\"#接受不安\" class=\"headerlink\" title=\"接受不安\"></a>接受不安</h3><p>有时候，我发现自己会没来由的不开心或者情绪失落。又或者是早上心情很好，自信满满，情绪高涨，全是积极向上的情绪。但到了中午或者下午又或者是晚上，就会没来由的失落。我们要接受这是一种正常的，合理的表现。</p>\n<p>在负面情绪很激烈的时候，需要暗示自己。“交给时间，一切都会过去的”。所以也就需要做到平常心，志得意满时留一分，灰心丧气时打打气。</p>\n<p>这样也\b更容易做到不和别人攀比，更多的专注于自己内心的想法和感受。</p>\n<h3 id=\"时间有魔力\"><a href=\"#时间有魔力\" class=\"headerlink\" title=\"时间有魔力\"></a>时间有魔力</h3><p>从去年到现在，个人感觉经历还算丰富。先是从上市公司辞职，然后自己创业。创业失败之后，进入一家E轮融资的母婴电商任职。</p>\n<p>这中间还包括爱情。去年1月23号，我刚认识现在的女友。根本不敢想象，在追了276天终于追到了女神。同时也结束了第一份工作。开启了第一份创业。很多人都想要创业，但都没走出这一步。我走出了这一步，只是结果不尽如人意。</p>\n<p>以上想表达的就是，时间总会给人惊喜。在当下某一个阶段觉得比较难的时候，坚持住。困境总会过去的。同样的，当下不管有多么得意，也需要保持敬畏之心。人生起起伏伏，保持正常心。</p>\n"},{"title":"职责链模式","date":"2019-04-14T10:49:35.000Z","cover_img":null,"feature_img":null,"description":null,"keywords":null,"_content":"职责链模式的定义：使多个对象都有机会处理请求，从而避免请求的发送者和\b接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。\n\n现实中的自责链模式：\n\n1. 挤公交车时传递公交卡\n2. 考试作弊时传答案\n\n","source":"_posts/职责链模式.md","raw":"---\ntitle: 职责链模式\ndate: 2019-04-14 18:49:35\ntags: [设计模式]\ncover_img:\nfeature_img:\ndescription:\nkeywords:\n---\n职责链模式的定义：使多个对象都有机会处理请求，从而避免请求的发送者和\b接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。\n\n现实中的自责链模式：\n\n1. 挤公交车时传递公交卡\n2. 考试作弊时传答案\n\n","slug":"职责链模式","published":1,"updated":"2019-04-15T02:52:24.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzaz4d280011npmkmva2qf8n","content":"<p>职责链模式的定义：使多个对象都有机会处理请求，从而避免请求的发送者和\b接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p>\n<p>现实中的自责链模式：</p>\n<ol>\n<li>挤公交车时传递公交卡</li>\n<li>考试作弊时传答案</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>职责链模式的定义：使多个对象都有机会处理请求，从而避免请求的发送者和\b接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p>\n<p>现实中的自责链模式：</p>\n<ol>\n<li>挤公交车时传递公交卡</li>\n<li>考试作弊时传答案</li>\n</ol>\n"},{"title":"西安落户","date":"2019-04-14T11:09:54.000Z","cover_img":null,"feature_img":null,"description":null,"keywords":null,"_content":"最近\b计划买房，看到一些人都有这个疑问，同样的我操作的时候也有一些疑惑。接下来把步骤写一下。\n\n1. 微信搜索\b“西安公安”\n2. 下方菜单\b“掌上户籍室”\n3. 点击\b“学历落户”\n   ![](/images/1.jpg)\n4. “在线申报”\n5. 选择办事单位、申请入户地址（需要和置业顾问沟通）\n6. 填完必填项。寄送方式：建议去派出所。不到5min就处理完。\n\n```建议打印毕业证、身份证。办理完就只有一张户籍卡，至此就是一名西安市公民了。```\n","source":"_posts/西安落户.md","raw":"---\ntitle: 西安落户\ndate: 2019-04-14 19:09:54\ntags: [西安落户]\ncover_img:\nfeature_img:\ndescription:\nkeywords: \n---\n最近\b计划买房，看到一些人都有这个疑问，同样的我操作的时候也有一些疑惑。接下来把步骤写一下。\n\n1. 微信搜索\b“西安公安”\n2. 下方菜单\b“掌上户籍室”\n3. 点击\b“学历落户”\n   ![](/images/1.jpg)\n4. “在线申报”\n5. 选择办事单位、申请入户地址（需要和置业顾问沟通）\n6. 填完必填项。寄送方式：建议去派出所。不到5min就处理完。\n\n```建议打印毕业证、身份证。办理完就只有一张户籍卡，至此就是一名西安市公民了。```\n","slug":"西安落户","published":1,"updated":"2019-04-14T11:43:47.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzaz4d2a0013npmk34fnuedz","content":"<p>最近\b计划买房，看到一些人都有这个疑问，同样的我操作的时候也有一些疑惑。接下来把步骤写一下。</p>\n<ol>\n<li>微信搜索\b“西安公安”</li>\n<li>下方菜单\b“掌上户籍室”</li>\n<li>点击\b“学历落户”<br><img src=\"/images/1.jpg\" alt></li>\n<li>“在线申报”</li>\n<li>选择办事单位、申请入户地址（需要和置业顾问沟通）</li>\n<li>填完必填项。寄送方式：建议去派出所。不到5min就处理完。</li>\n</ol>\n<p><code>建议打印毕业证、身份证。办理完就只有一张户籍卡，至此就是一名西安市公民了。</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近\b计划买房，看到一些人都有这个疑问，同样的我操作的时候也有一些疑惑。接下来把步骤写一下。</p>\n<ol>\n<li>微信搜索\b“西安公安”</li>\n<li>下方菜单\b“掌上户籍室”</li>\n<li>点击\b“学历落户”<br><img src=\"/images/1.jpg\" alt></li>\n<li>“在线申报”</li>\n<li>选择办事单位、申请入户地址（需要和置业顾问沟通）</li>\n<li>填完必填项。寄送方式：建议去派出所。不到5min就处理完。</li>\n</ol>\n<p><code>建议打印毕业证、身份证。办理完就只有一张户籍卡，至此就是一名西安市公民了。</code></p>\n"},{"title":"设计模式","date":"2019-07-02T09:17:27.000Z","cover_img":null,"feature_img":null,"description":null,"keywords":null,"_content":"#### 设计模式六大原则\n1. 单一原则\n2. 对扩展开放对修改关闭\n3. 组合大于继承\n4. 接口隔离原则\n5. 依赖倒置原则\n6. 高内聚低耦合\n\n#### 设计模式主要分类\n1. 创建型\n    - 工厂模式（解决批量生产的问题）\n    ```\n    function factor(type) {\n        let _str = `this is ${type} App.`\n        return _str;\n    }\n    ```\n    - 建造者模式(关心建造过程)\n    ```\n    new Vue({\n        el: '',\n        data: ''\n    })\n    ```\n    - 原型模式\n    - 单例模式(全局有且只有一个)\n    ```\n    functon Person() {\n        if (window.p == this) {\n            return this;\n        } else {\n            return new Person()\n        }\n    }\n    let p =new Person();\n    ```\n2. 结构型\n    - 外观（把多个接口统一成一个接口调用）\n    - 适配器（做一个转接口，转换数据格式）\n    ```\n    A.xx();\n    function adapt() {\n        window.A = B;\n        A.xx = B.xx;\n    }\n    ```\n    - 装饰者\n    ```\n    var _fn = A.xx;\n    A.xx = function() {\n        _fn.call(A);\n        // 加入扩展功能\n    }\n    ```\n    - 享元模式（提取公共部分）\n    - 桥接模式\n3. 行为型\n    - 观察者、订阅发布模式(解决两个无法沟通的模块可以沟通)\n    ```\n    function obs() {\n        this.callback = {}\n    }\n    obs.prototype.on = function(type, fn) {\n        this.callback[type] = fn;\n    }\n    obs.prototype.emit = function(type) {\n        this.callback[type]();\n    }\n\n    var ob = new obs();\n    ob.on('test', function() {\n        console.log('i am a test');\n    })\n    ob.emit('test);\n    ```\n    - 状态/策略模式（解决if else过多的问题）\n    ```\n    function deal(type) {\n        if (type == 1) {\n\n        } else if() {\n\n        } else {\n\n        }\n    }\n\n    function deal(type) {\n        var cator = {\n            type1: function() {\n\n            },\n            type2: function() {\n\n            }\n            ...\n        }\n        cator[type]();\n    }\n    ```\n    - 命令模式(具体的操作和实现节耦，对复杂操作进行节耦)\n    - 指责链模式（把程序分成一个一个模块，让根据指责链接调用）\n    - 迭代器模式\n    - 访问者模式\n4. 技巧型\n    - 链接模式\n    - 委托模式\n    - 节流模式\n    - 惰性模式\n    - 等待者模式\n","source":"_posts/设计模式.md","raw":"---\ntitle: 设计模式\ndate: 2019-07-02 17:17:27\ntags: [设计模式]\ncover_img:\nfeature_img:\ndescription:\nkeywords:\n---\n#### 设计模式六大原则\n1. 单一原则\n2. 对扩展开放对修改关闭\n3. 组合大于继承\n4. 接口隔离原则\n5. 依赖倒置原则\n6. 高内聚低耦合\n\n#### 设计模式主要分类\n1. 创建型\n    - 工厂模式（解决批量生产的问题）\n    ```\n    function factor(type) {\n        let _str = `this is ${type} App.`\n        return _str;\n    }\n    ```\n    - 建造者模式(关心建造过程)\n    ```\n    new Vue({\n        el: '',\n        data: ''\n    })\n    ```\n    - 原型模式\n    - 单例模式(全局有且只有一个)\n    ```\n    functon Person() {\n        if (window.p == this) {\n            return this;\n        } else {\n            return new Person()\n        }\n    }\n    let p =new Person();\n    ```\n2. 结构型\n    - 外观（把多个接口统一成一个接口调用）\n    - 适配器（做一个转接口，转换数据格式）\n    ```\n    A.xx();\n    function adapt() {\n        window.A = B;\n        A.xx = B.xx;\n    }\n    ```\n    - 装饰者\n    ```\n    var _fn = A.xx;\n    A.xx = function() {\n        _fn.call(A);\n        // 加入扩展功能\n    }\n    ```\n    - 享元模式（提取公共部分）\n    - 桥接模式\n3. 行为型\n    - 观察者、订阅发布模式(解决两个无法沟通的模块可以沟通)\n    ```\n    function obs() {\n        this.callback = {}\n    }\n    obs.prototype.on = function(type, fn) {\n        this.callback[type] = fn;\n    }\n    obs.prototype.emit = function(type) {\n        this.callback[type]();\n    }\n\n    var ob = new obs();\n    ob.on('test', function() {\n        console.log('i am a test');\n    })\n    ob.emit('test);\n    ```\n    - 状态/策略模式（解决if else过多的问题）\n    ```\n    function deal(type) {\n        if (type == 1) {\n\n        } else if() {\n\n        } else {\n\n        }\n    }\n\n    function deal(type) {\n        var cator = {\n            type1: function() {\n\n            },\n            type2: function() {\n\n            }\n            ...\n        }\n        cator[type]();\n    }\n    ```\n    - 命令模式(具体的操作和实现节耦，对复杂操作进行节耦)\n    - 指责链模式（把程序分成一个一个模块，让根据指责链接调用）\n    - 迭代器模式\n    - 访问者模式\n4. 技巧型\n    - 链接模式\n    - 委托模式\n    - 节流模式\n    - 惰性模式\n    - 等待者模式\n","slug":"设计模式","published":1,"updated":"2019-07-05T06:46:47.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzaz4d2b0015npmk2aajs8zv","content":"<h4 id=\"设计模式六大原则\"><a href=\"#设计模式六大原则\" class=\"headerlink\" title=\"设计模式六大原则\"></a>设计模式六大原则</h4><ol>\n<li>单一原则</li>\n<li>对扩展开放对修改关闭</li>\n<li>组合大于继承</li>\n<li>接口隔离原则</li>\n<li>依赖倒置原则</li>\n<li>高内聚低耦合</li>\n</ol>\n<h4 id=\"设计模式主要分类\"><a href=\"#设计模式主要分类\" class=\"headerlink\" title=\"设计模式主要分类\"></a>设计模式主要分类</h4><ol>\n<li><p>创建型</p>\n<ul>\n<li><p>工厂模式（解决批量生产的问题）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function factor(type) &#123;</span><br><span class=\"line\">    let _str = `this is $&#123;type&#125; App.`</span><br><span class=\"line\">    return _str;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建造者模式(关心建造过程)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">    el: &apos;&apos;,</span><br><span class=\"line\">    data: &apos;&apos;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原型模式</p>\n</li>\n<li>单例模式(全局有且只有一个)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">functon Person() &#123;</span><br><span class=\"line\">    if (window.p == this) &#123;</span><br><span class=\"line\">        return this;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return new Person()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let p =new Person();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>结构型</p>\n<ul>\n<li>外观（把多个接口统一成一个接口调用）</li>\n<li><p>适配器（做一个转接口，转换数据格式）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A.xx();</span><br><span class=\"line\">function adapt() &#123;</span><br><span class=\"line\">    window.A = B;</span><br><span class=\"line\">    A.xx = B.xx;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>装饰者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var _fn = A.xx;</span><br><span class=\"line\">A.xx = function() &#123;</span><br><span class=\"line\">    _fn.call(A);</span><br><span class=\"line\">    // 加入扩展功能</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>享元模式（提取公共部分）</p>\n</li>\n<li>桥接模式</li>\n</ul>\n</li>\n<li><p>行为型</p>\n<ul>\n<li><p>观察者、订阅发布模式(解决两个无法沟通的模块可以沟通)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function obs() &#123;</span><br><span class=\"line\">    this.callback = &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obs.prototype.on = function(type, fn) &#123;</span><br><span class=\"line\">    this.callback[type] = fn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obs.prototype.emit = function(type) &#123;</span><br><span class=\"line\">    this.callback[type]();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var ob = new obs();</span><br><span class=\"line\">ob.on(&apos;test&apos;, function() &#123;</span><br><span class=\"line\">    console.log(&apos;i am a test&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">ob.emit(&apos;test);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>状态/策略模式（解决if else过多的问题）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function deal(type) &#123;</span><br><span class=\"line\">    if (type == 1) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else if() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function deal(type) &#123;</span><br><span class=\"line\">    var cator = &#123;</span><br><span class=\"line\">        type1: function() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        type2: function() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cator[type]();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>命令模式(具体的操作和实现节耦，对复杂操作进行节耦)</p>\n</li>\n<li>指责链模式（把程序分成一个一个模块，让根据指责链接调用）</li>\n<li>迭代器模式</li>\n<li>访问者模式</li>\n</ul>\n</li>\n<li>技巧型<ul>\n<li>链接模式</li>\n<li>委托模式</li>\n<li>节流模式</li>\n<li>惰性模式</li>\n<li>等待者模式</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"设计模式六大原则\"><a href=\"#设计模式六大原则\" class=\"headerlink\" title=\"设计模式六大原则\"></a>设计模式六大原则</h4><ol>\n<li>单一原则</li>\n<li>对扩展开放对修改关闭</li>\n<li>组合大于继承</li>\n<li>接口隔离原则</li>\n<li>依赖倒置原则</li>\n<li>高内聚低耦合</li>\n</ol>\n<h4 id=\"设计模式主要分类\"><a href=\"#设计模式主要分类\" class=\"headerlink\" title=\"设计模式主要分类\"></a>设计模式主要分类</h4><ol>\n<li><p>创建型</p>\n<ul>\n<li><p>工厂模式（解决批量生产的问题）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function factor(type) &#123;</span><br><span class=\"line\">    let _str = `this is $&#123;type&#125; App.`</span><br><span class=\"line\">    return _str;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建造者模式(关心建造过程)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">    el: &apos;&apos;,</span><br><span class=\"line\">    data: &apos;&apos;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原型模式</p>\n</li>\n<li>单例模式(全局有且只有一个)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">functon Person() &#123;</span><br><span class=\"line\">    if (window.p == this) &#123;</span><br><span class=\"line\">        return this;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return new Person()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let p =new Person();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>结构型</p>\n<ul>\n<li>外观（把多个接口统一成一个接口调用）</li>\n<li><p>适配器（做一个转接口，转换数据格式）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A.xx();</span><br><span class=\"line\">function adapt() &#123;</span><br><span class=\"line\">    window.A = B;</span><br><span class=\"line\">    A.xx = B.xx;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>装饰者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var _fn = A.xx;</span><br><span class=\"line\">A.xx = function() &#123;</span><br><span class=\"line\">    _fn.call(A);</span><br><span class=\"line\">    // 加入扩展功能</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>享元模式（提取公共部分）</p>\n</li>\n<li>桥接模式</li>\n</ul>\n</li>\n<li><p>行为型</p>\n<ul>\n<li><p>观察者、订阅发布模式(解决两个无法沟通的模块可以沟通)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function obs() &#123;</span><br><span class=\"line\">    this.callback = &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obs.prototype.on = function(type, fn) &#123;</span><br><span class=\"line\">    this.callback[type] = fn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obs.prototype.emit = function(type) &#123;</span><br><span class=\"line\">    this.callback[type]();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var ob = new obs();</span><br><span class=\"line\">ob.on(&apos;test&apos;, function() &#123;</span><br><span class=\"line\">    console.log(&apos;i am a test&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">ob.emit(&apos;test);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>状态/策略模式（解决if else过多的问题）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function deal(type) &#123;</span><br><span class=\"line\">    if (type == 1) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else if() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function deal(type) &#123;</span><br><span class=\"line\">    var cator = &#123;</span><br><span class=\"line\">        type1: function() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        type2: function() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cator[type]();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>命令模式(具体的操作和实现节耦，对复杂操作进行节耦)</p>\n</li>\n<li>指责链模式（把程序分成一个一个模块，让根据指责链接调用）</li>\n<li>迭代器模式</li>\n<li>访问者模式</li>\n</ul>\n</li>\n<li>技巧型<ul>\n<li>链接模式</li>\n<li>委托模式</li>\n<li>节流模式</li>\n<li>惰性模式</li>\n<li>等待者模式</li>\n</ul>\n</li>\n</ol>\n"},{"title":"设计模式实例","date":"2019-07-02T09:54:36.000Z","cover_img":null,"feature_img":null,"description":null,"keywords":null,"_content":"### 实现按下键盘超级玛丽跑和跳\n```\nerror code\nwindow.onkeydown = function(e) {\n    var code = e.which;\n    if (code == 'run') {\n\n    } else if (code == 'jump') {\n\n    }\n}\n\n// correct code \nfunction mary() {\n    this.statearr = [];\n    this.action = {\n        run: function() {\n\n        },\n        jump: function() {\n\n        }\n    }\n}\n\nmary.prototype.extends = function(name, fn) {\n    this.action[name] = fn;\n}\n\nmary.prototype.addstate = function(state) {\n    this.statearr.push(state);\n    return this;\n}\n\nmary.prototype.exec = function(state) {\n    var that = this;\n    this.statearr.forEach(function(item, index) {\n        that.action[item]();\n    })\n}\n\nvar maryob = new mary();\nmary.extends('fire', function() {\n\n})\n\nwindow.onkeydown = function(event) {\n    var code = event.which;\n    mary.addState(code).exec();\n}\n```\n### 三个异步操作，等三个执行完再执行操作\n等待者模式实现\n```\nvar arr = [\n    function() {\n\n    },\n    function() {\n        \n    },\n    function() {\n        \n    }\n]\nfunction awaiter(arr) {\n    var len = arr.length;\n    var nowfinish = 0;\n    arr.forEach(function(fn, index) [\n        setTimeout(function() {\n            fn();\n            nowfinish++;\n            if (nowfinish == length) {\n                console.log('all finish');\n            }\n        })\n    ])\n}\n```\n\n\n\n","source":"_posts/设计模式实例.md","raw":"---\ntitle: 设计模式实例\ndate: 2019-07-02 17:54:36\ntags: [设计模式]\ncover_img:\nfeature_img:\ndescription:\nkeywords:\n---\n### 实现按下键盘超级玛丽跑和跳\n```\nerror code\nwindow.onkeydown = function(e) {\n    var code = e.which;\n    if (code == 'run') {\n\n    } else if (code == 'jump') {\n\n    }\n}\n\n// correct code \nfunction mary() {\n    this.statearr = [];\n    this.action = {\n        run: function() {\n\n        },\n        jump: function() {\n\n        }\n    }\n}\n\nmary.prototype.extends = function(name, fn) {\n    this.action[name] = fn;\n}\n\nmary.prototype.addstate = function(state) {\n    this.statearr.push(state);\n    return this;\n}\n\nmary.prototype.exec = function(state) {\n    var that = this;\n    this.statearr.forEach(function(item, index) {\n        that.action[item]();\n    })\n}\n\nvar maryob = new mary();\nmary.extends('fire', function() {\n\n})\n\nwindow.onkeydown = function(event) {\n    var code = event.which;\n    mary.addState(code).exec();\n}\n```\n### 三个异步操作，等三个执行完再执行操作\n等待者模式实现\n```\nvar arr = [\n    function() {\n\n    },\n    function() {\n        \n    },\n    function() {\n        \n    }\n]\nfunction awaiter(arr) {\n    var len = arr.length;\n    var nowfinish = 0;\n    arr.forEach(function(fn, index) [\n        setTimeout(function() {\n            fn();\n            nowfinish++;\n            if (nowfinish == length) {\n                console.log('all finish');\n            }\n        })\n    ])\n}\n```\n\n\n\n","slug":"设计模式实例","published":1,"updated":"2019-07-05T06:47:01.902Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzaz4d2e0018npmkburorp1p","content":"<h3 id=\"实现按下键盘超级玛丽跑和跳\"><a href=\"#实现按下键盘超级玛丽跑和跳\" class=\"headerlink\" title=\"实现按下键盘超级玛丽跑和跳\"></a>实现按下键盘超级玛丽跑和跳</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error code</span><br><span class=\"line\">window.onkeydown = function(e) &#123;</span><br><span class=\"line\">    var code = e.which;</span><br><span class=\"line\">    if (code == &apos;run&apos;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else if (code == &apos;jump&apos;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// correct code </span><br><span class=\"line\">function mary() &#123;</span><br><span class=\"line\">    this.statearr = [];</span><br><span class=\"line\">    this.action = &#123;</span><br><span class=\"line\">        run: function() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        jump: function() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mary.prototype.extends = function(name, fn) &#123;</span><br><span class=\"line\">    this.action[name] = fn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mary.prototype.addstate = function(state) &#123;</span><br><span class=\"line\">    this.statearr.push(state);</span><br><span class=\"line\">    return this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mary.prototype.exec = function(state) &#123;</span><br><span class=\"line\">    var that = this;</span><br><span class=\"line\">    this.statearr.forEach(function(item, index) &#123;</span><br><span class=\"line\">        that.action[item]();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var maryob = new mary();</span><br><span class=\"line\">mary.extends(&apos;fire&apos;, function() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">window.onkeydown = function(event) &#123;</span><br><span class=\"line\">    var code = event.which;</span><br><span class=\"line\">    mary.addState(code).exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三个异步操作，等三个执行完再执行操作\"><a href=\"#三个异步操作，等三个执行完再执行操作\" class=\"headerlink\" title=\"三个异步操作，等三个执行完再执行操作\"></a>三个异步操作，等三个执行完再执行操作</h3><p>等待者模式实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [</span><br><span class=\"line\">    function() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    function() &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    function() &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">function awaiter(arr) &#123;</span><br><span class=\"line\">    var len = arr.length;</span><br><span class=\"line\">    var nowfinish = 0;</span><br><span class=\"line\">    arr.forEach(function(fn, index) [</span><br><span class=\"line\">        setTimeout(function() &#123;</span><br><span class=\"line\">            fn();</span><br><span class=\"line\">            nowfinish++;</span><br><span class=\"line\">            if (nowfinish == length) &#123;</span><br><span class=\"line\">                console.log(&apos;all finish&apos;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"实现按下键盘超级玛丽跑和跳\"><a href=\"#实现按下键盘超级玛丽跑和跳\" class=\"headerlink\" title=\"实现按下键盘超级玛丽跑和跳\"></a>实现按下键盘超级玛丽跑和跳</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error code</span><br><span class=\"line\">window.onkeydown = function(e) &#123;</span><br><span class=\"line\">    var code = e.which;</span><br><span class=\"line\">    if (code == &apos;run&apos;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else if (code == &apos;jump&apos;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// correct code </span><br><span class=\"line\">function mary() &#123;</span><br><span class=\"line\">    this.statearr = [];</span><br><span class=\"line\">    this.action = &#123;</span><br><span class=\"line\">        run: function() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        jump: function() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mary.prototype.extends = function(name, fn) &#123;</span><br><span class=\"line\">    this.action[name] = fn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mary.prototype.addstate = function(state) &#123;</span><br><span class=\"line\">    this.statearr.push(state);</span><br><span class=\"line\">    return this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mary.prototype.exec = function(state) &#123;</span><br><span class=\"line\">    var that = this;</span><br><span class=\"line\">    this.statearr.forEach(function(item, index) &#123;</span><br><span class=\"line\">        that.action[item]();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var maryob = new mary();</span><br><span class=\"line\">mary.extends(&apos;fire&apos;, function() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">window.onkeydown = function(event) &#123;</span><br><span class=\"line\">    var code = event.which;</span><br><span class=\"line\">    mary.addState(code).exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三个异步操作，等三个执行完再执行操作\"><a href=\"#三个异步操作，等三个执行完再执行操作\" class=\"headerlink\" title=\"三个异步操作，等三个执行完再执行操作\"></a>三个异步操作，等三个执行完再执行操作</h3><p>等待者模式实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [</span><br><span class=\"line\">    function() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    function() &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    function() &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">function awaiter(arr) &#123;</span><br><span class=\"line\">    var len = arr.length;</span><br><span class=\"line\">    var nowfinish = 0;</span><br><span class=\"line\">    arr.forEach(function(fn, index) [</span><br><span class=\"line\">        setTimeout(function() &#123;</span><br><span class=\"line\">            fn();</span><br><span class=\"line\">            nowfinish++;</span><br><span class=\"line\">            if (nowfinish == length) &#123;</span><br><span class=\"line\">                console.log(&apos;all finish&apos;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"设计模式实例2","date":"2019-07-02T10:28:57.000Z","cover_img":null,"feature_img":null,"description":null,"keywords":null,"_content":"#### 工厂模式\n```\n\n```\n\n#### 建造者模式\n```\n```\n\n#### 原型模式\n```\n```\n\n#### 单例模式\n```\n```\n\n#### 外观模式\n```\n```\n\n#### 适配器模式\n```\n```\n\n\n#### 装饰者模式\n```\n```\n\n\n#### 享元模式\n```\n```\n\n\n#### 桥接模式\n```\n```\n\n\n#### 订阅发布模式\n```\n```\n\n\n#### 状态策略模式\n ```\n```\n\n#### 命令模式\n```\n```\n\n\n#### 职责链模式\n```\n```\n\n\n#### 迭代器模式\n```\n```\n\n\n#### 访问者模式\n```\n```\n\n\n#### 链接模式\n```\n```\n\n\n#### 委托模式\n```\n```\n\n\n#### 节流模式\n```\n```\n\n\n#### 惰性模式\n```\n```\n\n\n#### 等待者模式\n```\n```\n\n","source":"_posts/设计模式实例2.md","raw":"---\ntitle: 设计模式实例2\ndate: 2019-07-02 18:28:57\ntags: [设计模式]\ncover_img:\nfeature_img:\ndescription:\nkeywords:\n---\n#### 工厂模式\n```\n\n```\n\n#### 建造者模式\n```\n```\n\n#### 原型模式\n```\n```\n\n#### 单例模式\n```\n```\n\n#### 外观模式\n```\n```\n\n#### 适配器模式\n```\n```\n\n\n#### 装饰者模式\n```\n```\n\n\n#### 享元模式\n```\n```\n\n\n#### 桥接模式\n```\n```\n\n\n#### 订阅发布模式\n```\n```\n\n\n#### 状态策略模式\n ```\n```\n\n#### 命令模式\n```\n```\n\n\n#### 职责链模式\n```\n```\n\n\n#### 迭代器模式\n```\n```\n\n\n#### 访问者模式\n```\n```\n\n\n#### 链接模式\n```\n```\n\n\n#### 委托模式\n```\n```\n\n\n#### 节流模式\n```\n```\n\n\n#### 惰性模式\n```\n```\n\n\n#### 等待者模式\n```\n```\n\n","slug":"设计模式实例2","published":1,"updated":"2019-07-05T06:50:24.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzaz4d2f001anpmknr8jeeff","content":"<h4 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">#### 原型模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 单例模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 外观模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 适配器模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 装饰者模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 享元模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 桥接模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 订阅发布模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 状态策略模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 命令模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 职责链模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 迭代器模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 访问者模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 链接模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 委托模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 节流模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 惰性模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 等待者模式</span><br></pre></td></tr></table></figure>\n<p><code>`</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">#### 原型模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 单例模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 外观模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 适配器模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 装饰者模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 享元模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 桥接模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 订阅发布模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 状态策略模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 命令模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 职责链模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 迭代器模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 访问者模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 链接模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 委托模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 节流模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 惰性模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 等待者模式</span><br></pre></td></tr></table></figure>\n<p><code>`</code></p>\n"},{"title":"西安住房公积金问题","date":"2019-04-10T02:13:45.000Z","cover_img":null,"feature_img":null,"description":null,"keywords":null,"_content":"### 外地有社保和公积金，西安住房公积金显示未查询到账户\n- 西安是否可以补交社保、公积金\n  社保可以补缴。公积金未详细咨询\n- 是否可以将外地转移至西安，有断缴是否可以补交\n  社保公积金可以转移。需要在西安开户一个月以后，将外地的转回来\n- 补交的购房是否可以按照满两年社保（无需迁移户口），或者使用公积金贷款\n  有部分社保补缴公司承诺可以内部操作，无补缴标记。\n- 如果转回来补交了，那在西安交社保的时间是从一开始在外地交的就算，还是按照补缴西安的这段时间算\n  该问题没有持续跟进\n\n### 如果不可以使用公积金贷款，商业贷款购房，满两年社保之后是否可以切换为公积金贷款\n  西安市公积金管理中心回复不可以。[商业贷款转公积金](0http://zfgjj.xa.gov.cn/hdjl/zxhf_xx.jsp?urltype=guestbook.GbBookDetailUrl&wbtreeid=1353&wbguestbookid=88219)\n","source":"_posts/西安住房公积金问题.md","raw":"---\ntitle: 西安住房公积金问题\ndate: 2019-04-10 10:13:45\ntags: [西安买房, 住房公积金]\ncover_img:\nfeature_img:\ndescription:\nkeywords:\n---\n### 外地有社保和公积金，西安住房公积金显示未查询到账户\n- 西安是否可以补交社保、公积金\n  社保可以补缴。公积金未详细咨询\n- 是否可以将外地转移至西安，有断缴是否可以补交\n  社保公积金可以转移。需要在西安开户一个月以后，将外地的转回来\n- 补交的购房是否可以按照满两年社保（无需迁移户口），或者使用公积金贷款\n  有部分社保补缴公司承诺可以内部操作，无补缴标记。\n- 如果转回来补交了，那在西安交社保的时间是从一开始在外地交的就算，还是按照补缴西安的这段时间算\n  该问题没有持续跟进\n\n### 如果不可以使用公积金贷款，商业贷款购房，满两年社保之后是否可以切换为公积金贷款\n  西安市公积金管理中心回复不可以。[商业贷款转公积金](0http://zfgjj.xa.gov.cn/hdjl/zxhf_xx.jsp?urltype=guestbook.GbBookDetailUrl&wbtreeid=1353&wbguestbookid=88219)\n","slug":"西安住房公积金问题","published":1,"updated":"2019-04-14T11:32:03.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzaz4d2h001dnpmk8r266bkt","content":"<h3 id=\"外地有社保和公积金，西安住房公积金显示未查询到账户\"><a href=\"#外地有社保和公积金，西安住房公积金显示未查询到账户\" class=\"headerlink\" title=\"外地有社保和公积金，西安住房公积金显示未查询到账户\"></a>外地有社保和公积金，西安住房公积金显示未查询到账户</h3><ul>\n<li>西安是否可以补交社保、公积金<br>社保可以补缴。公积金未详细咨询</li>\n<li>是否可以将外地转移至西安，有断缴是否可以补交<br>社保公积金可以转移。需要在西安开户一个月以后，将外地的转回来</li>\n<li>补交的购房是否可以按照满两年社保（无需迁移户口），或者使用公积金贷款<br>有部分社保补缴公司承诺可以内部操作，无补缴标记。</li>\n<li>如果转回来补交了，那在西安交社保的时间是从一开始在外地交的就算，还是按照补缴西安的这段时间算<br>该问题没有持续跟进</li>\n</ul>\n<h3 id=\"如果不可以使用公积金贷款，商业贷款购房，满两年社保之后是否可以切换为公积金贷款\"><a href=\"#如果不可以使用公积金贷款，商业贷款购房，满两年社保之后是否可以切换为公积金贷款\" class=\"headerlink\" title=\"如果不可以使用公积金贷款，商业贷款购房，满两年社保之后是否可以切换为公积金贷款\"></a>如果不可以使用公积金贷款，商业贷款购房，满两年社保之后是否可以切换为公积金贷款</h3><p>  西安市公积金管理中心回复不可以。<a href=\"0http://zfgjj.xa.gov.cn/hdjl/zxhf_xx.jsp?urltype=guestbook.GbBookDetailUrl&amp;wbtreeid=1353&amp;wbguestbookid=88219\" target=\"_blank\" rel=\"noopener\">商业贷款转公积金</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"外地有社保和公积金，西安住房公积金显示未查询到账户\"><a href=\"#外地有社保和公积金，西安住房公积金显示未查询到账户\" class=\"headerlink\" title=\"外地有社保和公积金，西安住房公积金显示未查询到账户\"></a>外地有社保和公积金，西安住房公积金显示未查询到账户</h3><ul>\n<li>西安是否可以补交社保、公积金<br>社保可以补缴。公积金未详细咨询</li>\n<li>是否可以将外地转移至西安，有断缴是否可以补交<br>社保公积金可以转移。需要在西安开户一个月以后，将外地的转回来</li>\n<li>补交的购房是否可以按照满两年社保（无需迁移户口），或者使用公积金贷款<br>有部分社保补缴公司承诺可以内部操作，无补缴标记。</li>\n<li>如果转回来补交了，那在西安交社保的时间是从一开始在外地交的就算，还是按照补缴西安的这段时间算<br>该问题没有持续跟进</li>\n</ul>\n<h3 id=\"如果不可以使用公积金贷款，商业贷款购房，满两年社保之后是否可以切换为公积金贷款\"><a href=\"#如果不可以使用公积金贷款，商业贷款购房，满两年社保之后是否可以切换为公积金贷款\" class=\"headerlink\" title=\"如果不可以使用公积金贷款，商业贷款购房，满两年社保之后是否可以切换为公积金贷款\"></a>如果不可以使用公积金贷款，商业贷款购房，满两年社保之后是否可以切换为公积金贷款</h3><p>  西安市公积金管理中心回复不可以。<a href=\"0http://zfgjj.xa.gov.cn/hdjl/zxhf_xx.jsp?urltype=guestbook.GbBookDetailUrl&amp;wbtreeid=1353&amp;wbguestbookid=88219\" target=\"_blank\" rel=\"noopener\">商业贷款转公积金</a></p>\n"},{"title":"蜜芽小程序沉思录","date":"2019-05-17T03:39:31.000Z","cover_img":null,"feature_img":null,"description":null,"keywords":null,"_content":"#### 开发周期大于测试周期\n开发时明确边界及修复潜在bug，避免将bug遗留到测试上线阶段。\n\n#### 一切以开发文档为主\n不接受开发叮叮沟通接口变更。一切以开发文档为主。规定成功和失败的code。\n\n#### 明确测试和上线时间\n设置测试和上线的deadline。","source":"_posts/蜜芽小程序沉思录.md","raw":"---\ntitle: 蜜芽小程序沉思录\ndate: 2019-05-17 11:39:31\ntags: [蜜芽]\ncover_img:\nfeature_img:\ndescription:\nkeywords:\n---\n#### 开发周期大于测试周期\n开发时明确边界及修复潜在bug，避免将bug遗留到测试上线阶段。\n\n#### 一切以开发文档为主\n不接受开发叮叮沟通接口变更。一切以开发文档为主。规定成功和失败的code。\n\n#### 明确测试和上线时间\n设置测试和上线的deadline。","slug":"蜜芽小程序沉思录","published":1,"updated":"2019-07-05T06:47:36.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzaz4d2i001fnpmkfcuxb039","content":"<h4 id=\"开发周期大于测试周期\"><a href=\"#开发周期大于测试周期\" class=\"headerlink\" title=\"开发周期大于测试周期\"></a>开发周期大于测试周期</h4><p>开发时明确边界及修复潜在bug，避免将bug遗留到测试上线阶段。</p>\n<h4 id=\"一切以开发文档为主\"><a href=\"#一切以开发文档为主\" class=\"headerlink\" title=\"一切以开发文档为主\"></a>一切以开发文档为主</h4><p>不接受开发叮叮沟通接口变更。一切以开发文档为主。规定成功和失败的code。</p>\n<h4 id=\"明确测试和上线时间\"><a href=\"#明确测试和上线时间\" class=\"headerlink\" title=\"明确测试和上线时间\"></a>明确测试和上线时间</h4><p>设置测试和上线的deadline。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"开发周期大于测试周期\"><a href=\"#开发周期大于测试周期\" class=\"headerlink\" title=\"开发周期大于测试周期\"></a>开发周期大于测试周期</h4><p>开发时明确边界及修复潜在bug，避免将bug遗留到测试上线阶段。</p>\n<h4 id=\"一切以开发文档为主\"><a href=\"#一切以开发文档为主\" class=\"headerlink\" title=\"一切以开发文档为主\"></a>一切以开发文档为主</h4><p>不接受开发叮叮沟通接口变更。一切以开发文档为主。规定成功和失败的code。</p>\n<h4 id=\"明确测试和上线时间\"><a href=\"#明确测试和上线时间\" class=\"headerlink\" title=\"明确测试和上线时间\"></a>明确测试和上线时间</h4><p>设置测试和上线的deadline。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjzaz4d1c0001npmkn76vn5mo","tag_id":"cjzaz4d1g0003npmkjdi28irc","_id":"cjzaz4d1l0008npmki7mqh1gu"},{"post_id":"cjzaz4d1f0002npmk9guq260x","tag_id":"cjzaz4d1l0007npmkgkcd6ot8","_id":"cjzaz4d1q000enpmkkxnr9si4"},{"post_id":"cjzaz4d1f0002npmk9guq260x","tag_id":"cjzaz4d1n000bnpmk01391ega","_id":"cjzaz4d1r000fnpmkh1hcyxif"},{"post_id":"cjzaz4d1j0005npmkzm28u5d8","tag_id":"cjzaz4d1q000dnpmk6eh2xa7o","_id":"cjzaz4d1r000inpmk9i2r99h9"},{"post_id":"cjzaz4d1j0005npmkzm28u5d8","tag_id":"cjzaz4d1r000gnpmk083ey70x","_id":"cjzaz4d1r000jnpmkffcggtmj"},{"post_id":"cjzaz4d1k0006npmkmw3af4vi","tag_id":"cjzaz4d1r000hnpmkertafn66","_id":"cjzaz4d1r000lnpmkjpu3prt7"},{"post_id":"cjzaz4d1m000anpmkewox669l","tag_id":"cjzaz4d1r000knpmk3wgrtbeq","_id":"cjzaz4d1s000nnpmkmazv1dns"},{"post_id":"cjzaz4d1o000cnpmknbu379rb","tag_id":"cjzaz4d1s000mnpmkd62yljny","_id":"cjzaz4d1s000onpmkaf3915pt"},{"post_id":"cjzaz4d22000pnpmk8cjxatme","tag_id":"cjzaz4d1s000mnpmkd62yljny","_id":"cjzaz4d24000snpmknrb51vch"},{"post_id":"cjzaz4d23000rnpmk7kuen6un","tag_id":"cjzaz4d25000unpmk786f6gbj","_id":"cjzaz4d27000znpmki9gsrnfk"},{"post_id":"cjzaz4d24000tnpmkx556aet7","tag_id":"cjzaz4d27000ynpmkzgnscedc","_id":"cjzaz4d2a0014npmktpt8dhay"},{"post_id":"cjzaz4d280011npmkmva2qf8n","tag_id":"cjzaz4d1s000mnpmkd62yljny","_id":"cjzaz4d2e0016npmkhr0044vx"},{"post_id":"cjzaz4d2b0015npmk2aajs8zv","tag_id":"cjzaz4d1s000mnpmkd62yljny","_id":"cjzaz4d2f0019npmk8us4asyp"},{"post_id":"cjzaz4d2e0018npmkburorp1p","tag_id":"cjzaz4d1s000mnpmkd62yljny","_id":"cjzaz4d2h001bnpmkh5mofu56"},{"post_id":"cjzaz4d25000vnpmkgv5eyr11","tag_id":"cjzaz4d290012npmku9y1eo8b","_id":"cjzaz4d2i001enpmk0g937pxk"},{"post_id":"cjzaz4d25000vnpmkgv5eyr11","tag_id":"cjzaz4d2e0017npmkf3k6ebne","_id":"cjzaz4d2j001gnpmktmf3wik7"},{"post_id":"cjzaz4d2f001anpmknr8jeeff","tag_id":"cjzaz4d1s000mnpmkd62yljny","_id":"cjzaz4d2j001inpmkd4vo9qxa"},{"post_id":"cjzaz4d2i001fnpmkfcuxb039","tag_id":"cjzaz4d1q000dnpmk6eh2xa7o","_id":"cjzaz4d2k001jnpmkg11m3foi"},{"post_id":"cjzaz4d26000wnpmkhamb5e8u","tag_id":"cjzaz4d2h001cnpmk8j91g61n","_id":"cjzaz4d2k001lnpmkm4lqkpdr"},{"post_id":"cjzaz4d26000wnpmkhamb5e8u","tag_id":"cjzaz4d2j001hnpmkntgelxay","_id":"cjzaz4d2l001mnpmkjxhin4e1"},{"post_id":"cjzaz4d26000xnpmk9ot0ljvs","tag_id":"cjzaz4d2k001knpmku0m51buk","_id":"cjzaz4d2l001onpmkyc84eqro"},{"post_id":"cjzaz4d270010npmks9pnnru9","tag_id":"cjzaz4d2l001nnpmkb64bqexe","_id":"cjzaz4d2o001snpmk7f85r2fq"},{"post_id":"cjzaz4d270010npmks9pnnru9","tag_id":"cjzaz4d2l001pnpmk9wv150am","_id":"cjzaz4d2o001tnpmkumdgktjb"},{"post_id":"cjzaz4d270010npmks9pnnru9","tag_id":"cjzaz4d2m001qnpmkfolw53w8","_id":"cjzaz4d2o001vnpmksz1dy00a"},{"post_id":"cjzaz4d2a0013npmk34fnuedz","tag_id":"cjzaz4d2n001rnpmkgyvpdfym","_id":"cjzaz4d2p001wnpmkhhmzepzi"},{"post_id":"cjzaz4d2h001dnpmk8r266bkt","tag_id":"cjzaz4d2o001unpmkmhqlzj8b","_id":"cjzaz4d2r001ynpmkiknow7pg"},{"post_id":"cjzaz4d2h001dnpmk8r266bkt","tag_id":"cjzaz4d2p001xnpmki3u821te","_id":"cjzaz4d2r001znpmkrywalg7s"}],"Tag":[{"name":"typescript","_id":"cjzaz4d1g0003npmkjdi28irc"},{"name":"前端","_id":"cjzaz4d1l0007npmkgkcd6ot8"},{"name":"React","_id":"cjzaz4d1n000bnpmk01391ega"},{"name":"蜜芽","_id":"cjzaz4d1q000dnpmk6eh2xa7o"},{"name":"自有品牌荟小程序","_id":"cjzaz4d1r000gnpmk083ey70x"},{"name":"github资源","_id":"cjzaz4d1r000hnpmkertafn66"},{"name":"node","_id":"cjzaz4d1r000knpmk3wgrtbeq"},{"name":"设计模式","_id":"cjzaz4d1s000mnpmkd62yljny"},{"name":"code","_id":"cjzaz4d25000unpmk786f6gbj"},{"name":"开发环境","_id":"cjzaz4d27000ynpmkzgnscedc"},{"name":"未来","_id":"cjzaz4d290012npmku9y1eo8b"},{"name":"商业","_id":"cjzaz4d2e0017npmkf3k6ebne"},{"name":"微信小程序","_id":"cjzaz4d2h001cnpmk8j91g61n"},{"name":"海报","_id":"cjzaz4d2j001hnpmkntgelxay"},{"name":"创业","_id":"cjzaz4d2k001knpmku0m51buk"},{"name":"情绪","_id":"cjzaz4d2l001nnpmkb64bqexe"},{"name":"时间","_id":"cjzaz4d2l001pnpmk9wv150am"},{"name":"随笔","_id":"cjzaz4d2m001qnpmkfolw53w8"},{"name":"西安落户","_id":"cjzaz4d2n001rnpmkgyvpdfym"},{"name":"西安买房","_id":"cjzaz4d2o001unpmkmhqlzj8b"},{"name":"住房公积金","_id":"cjzaz4d2p001xnpmki3u821te"}]}}